@inproceedings{ChenML14-0,
	title        = {Combining research and education of software testing: a preliminary study},
	author       = {Zhenyu Chen and Atif Memon and Bin Luo},
	year         = 2014,
	booktitle    = {Symposium on Applied Computing, SAC 2014, Gyeongju, Republic of Korea - March 24 - 28, 2014},
	publisher    = {ACM},
	pages        = {1179--1180},
	doi          = {10.1145/2554850.2555124},
	isbn         = {978-1-4503-2469-4},
	url          = {http://doi.acm.org/10.1145/2554850.2555124},
	researchr    = {https://researchr.org/publication/ChenML14-0},
	cites        = {0},
	citedby      = {0},
	editor       = {Yookun Cho and Sung Y. Shin and Sang-Wook Kim and Chih-Cheng Hung and Jiman Hong}
}
@inproceedings{KL2013,
	title        = {Bug of the Day: Reinforcing the importance of testing},
	author       = {Krutz, Daniel E. and Lutz, Michael},
	year         = 2013,
	booktitle    = { Frontiers in Education Conference (FIE)},
   publisher    = {IEEE},
	volume       = {},
	number       = {},
	pages        = {1795--1799},
	doi          = {10.1109/FIE.2013.6685147}
}
@inproceedings{Ochoa2015,
	title        = {An approach to enhance students' competency in software verification techniques},
	author       = {Ochoa, Omar and Salamah, Salamah},
	year         = 2015,
	booktitle    = { Frontiers in Education Conference (FIE)},
publisher    = {IEEE},
	volume       = {},
	number       = {},
	pages        = {1--9},
	doi          = {10.1109/FIE.2015.7344050}
}
@article{SBIE5119,
	title        = {Um Mapeamento Sistem\'{a}tico sobre Ensino de Teste de Software},
	author       = {Pedro Valle e Ellen Barbosa e Jos\'{e} Maldonado},
	year         = 2015,
	journal      = {Brazilian Symposium on Computers in Education (Simp\'{o}sio Brasileiro de Inform\'{a}tica na Educa\c{c}\~{a}o - SBIE)},
	volume       = 26,
	number       = 1,
	pages        = 71,
	doi          = {10.5753/cbie.sbie.2015.71},
	issn         = {2316-6533},
	url          = {http://br-ie.org/pub/index.php/sbie/article/view/5119},
	keywords     = {},
	abstract     = {Context: Software testing is an important activity to ensure quality for software products. However, there is a lack of qualified professionals and a lack of motivation to work with software testing. Objective: To identify the state of art about teaching software testing. Method: We performed a systematic mapping based on digital libraries and manual search. Results: We identified the main approaches of teaching software testing, as well as how to develop and evaluate them. Futhermore, we idenfied the languages addressed to teaching and the testing phases considered in these approaches. Conclusion: We characterized the state of art about teaching software testing approaches, observing that the most used ones are educational games and teaching software testing combined programming.}
}
@inproceedings{PratherEtAl19,
	title        = {First Things First: Providing Metacognitive Scaffolding for Interpreting Problem Prompts},
	author       = {Prather, James and Pettit, Raymond and Becker, Brett A. and Denny, Paul and Loksa, Dastyni and Peters, Alani and Albrecht, Zachary and Masci, Krista},
	year         = 2019,
	booktitle    = {50th ACM Technical Symposium on Computer Science Education},
	location     = {Minneapolis, MN, USA},
	publisher    = {ACM},
	series       = {SIGCSE '19},
	pages        = {531–537},
	doi          = {10.1145/3287324.3287374},
	isbn         = 9781450358903,
	url          = {https://doi.org/10.1145/3287324.3287374},
	numpages     = 7,
	keywords     = {cs1, automated assessment tools, metacognitive awareness}
}
@article{10.1145/1151954.1067451,
	title        = {Testing First: Emphasizing Testing in Early Programming Courses},
	author       = {Marrero, Will and Settle, Amber},
	year         = 2005,
	month        = {jun},
	journal      = {SIGCSE Bull.},
	booktitle    = {10th Annual SIGCSE Conference on Innovation and Technology in Computer Science Education},
	location     = {Caparica, Portugal},
	publisher    = {ACM},
	series       = {ITiCSE '05},
	volume       = 37,
	number       = 3,
	pages        = {4–8},
	doi          = {10.1145/1151954.1067451},
	isbn         = 1595930248,
	issn         = {0097-8418},
	url          = {https://doi.org/10.1145/1151954.1067451},
	issue_date   = {September 2005},
	abstract     = {The complexity of languages like Java and C++ can make introductory programming classes in these languages extremely challenging for many students. Part of the complexity comes from the large number of concepts and language features that students are expected to learn while having little time for adequate practice or examples. A second source of difficulty is the emphasis that object-oriented programming places on abstraction. We believe that by placing a larger emphasis on testing in programming assignments in these introductory courses, students have an opportunity for extra practice with the language, and this affords them a gentler transition into the abstract thinking needed for programming. In this paper we describe how we emphasized testing in introductory programming assignments by requiring that students design and implement tests before starting on the program itself. We also provide some preliminary results and student reactions.},
	numpages     = 5,
	keywords     = {TDD, CS2, testing, CS1}
}
@inproceedings{Romlietal2011,
	title        = {Current Practices of Programming Assessment at Higher Learning Institutions},
	author       = {Romli, Rohaida and Sulaiman, Shahida and Zuhairi Zamli, Kamal},
	year         = 2011,
	booktitle    = {Software Engineering and Computer Systems},
	publisher    = {Springer Berlin Heidelberg},
	address      = {Berlin, Heidelberg},
	pages        = {471--485},
	isbn         = {978-3-642-22170-5},
	editor       = {Mohamad Zain, Jasni and Wan Mohd, Wan Maseri bt and El-Qawasmeh, Eyas},
	abstract     = {Assessing students' programming exercises has become a difficult activity that most educators encounter nowadays. The activity basically includes the tasks to construct questions and solution models in programming exercises as well as the method to evaluate students' solutions. Existing studies particularly in the area of programming assessment still have limited discussions on current practices in conducting the activity. This paper reports the preliminary study conducted among educators who have been teaching programming courses at higher learning institutions within the northern region in Malaysia. The study aims to gauge the current practices in the construction and evaluation of programming exercises item among educators at the associated institutions. The study used a questionnaire to gather the relevant data from the selected subjects. The results reveal that both the negative and positive testing criteria are essential in constructing and evaluating programming exercises. The findings of this study will be the input to identify the adequate criteria that should be included in developing a schema of test set for automatic programming assessment.}
}
@article{sharing-assignments2008,
	title        = {Developing a Common Format for Sharing Programming Assignments},
	author       = {Edwards, Stephen H. and B\"{o}rstler, J\"{u}rgen and Cassel, Lillian N. and Hall, Mark S. and Hollingsworth, Joseph},
	year         = 2008,
	month        = {nov},
	journal      = {SIGCSE Bull.},
	publisher    = {ACM},
	volume       = 40,
	number       = 4,
	pages        = {167–182},
	doi          = {10.1145/1473195.1473240},
	issn         = {0097-8418},
	url          = {https://doi.org/10.1145/1473195.1473240},
	issue_date   = {December 2008},
	abstract     = {Computer science educators spend a lot of effort designing programming assignments, and many are willing to share the results of this investment. However, sharing of programming assignments occurs primarily in an ad hoc manner through informal channels. There are no widely used mechanisms that support instructors in finding and sharing such resources. Often, the additional work required to prepare and self-publish assignment resources in a way that others can then adapt or reuse is a significant inhibitor. Also, other instructors may have to spend an inordinate amount of time and effort to reshape a potential assignment into something that can be used in their own courses. This working group report proposes a common format for packaging assignments for sharing. This format is easy for instructors to create (requiring no specialized tools), is extensible and flexible enough to handle assignments written for any programming language at any level of proficiency, supports appropriate metadata, and is easily manipulated by software tools. As more and more instructors use automated grading tools to process student submissions, it is our hope that such an interchange format can lead to a community practice of sharing resources in a way that overcomes existing barriers to such reuse.},
	numpages     = 16,
	keywords     = {interchange, automated grading, reuse, programming assignment}
}
@inproceedings{8190587,
	title        = {Aspects on finding the optimal practical programming exercise for MOOCs},
	author       = {Teusner, Ralf and Hille, Thomas and Hagedorn, Christiane},
	year         = 2017,
	booktitle    = { Frontiers in Education Conference (FIE)},
publisher    = {IEEE},
	volume       = {},
	number       = {},
	pages        = {1--8},
	doi          = {10.1109/FIE.2017.8190587}
}
@inproceedings{PL2017,
	title        = {Automatic vs Manual Assessment of Programming Tasks},
	author       = {Pieterse, Vreda and Liebenberg, Janet},
	year         = 2017,
	booktitle    = {17th Koli Calling International Conference on Computing Education Research},
	location     = {Koli, Finland},
	publisher    = {ACM},
	series       = {Koli Calling '17},
	pages        = {193–194},
	doi          = {10.1145/3141880.3141912},
	isbn         = 9781450353014,
	url          = {https://doi.org/10.1145/3141880.3141912},
	abstract     = {Lecturers are struggling to keep up with their daily responsibilities because of an ever-increasing workload. Manual programming assessment processes are time-consuming, but a possible solution is to use the assistance of automatic programming assessment methods. In this study, automatic assessment is compared with manual assessment, specifically for programming tasks. The paper concludes that an automatic assessment tool seems to be less feasible for practical tests and exams, but shows promise for the assessment of programs written during practical lab sessions.},
	numpages     = 2,
	keywords     = {automatic assessment, assessment, programming}
}
@inproceedings{MHD2019,
	title        = {Pragmatic Software Testing Education},
	author       = {Aniche, Maur\'{\i}cio and Hermans, Felienne and van Deursen, Arie},
	year         = 2019,
	booktitle    = {50th ACM Technical Symposium on Computer Science Education},
	location     = {Minneapolis, MN, USA},
	publisher    = {ACM},
	
	series       = {SIGCSE '19},
	pages        = {414–420},
	doi          = {10.1145/3287324.3287461},
	isbn         = 9781450358903,
	url          = {https://doi.org/10.1145/3287324.3287461},
	abstract     = {Software testing is an important topic in software engineering education, and yet highly challenging from an educational perspective: students are required to learn several testing techniques, to be able to distinguish the right technique to apply, to evaluate the quality of their test suites, and to write maintainable test code. In this paper, we describe how we have been adding a pragmatic perspective to our software testing course, and explore students' common mistakes, hard topics to learn, favourite learning activities, and challenges they face. To that aim, we analyze the feedback reports that our team of Teaching Assistants gave to the 230 students of our 2016-2017 software testing course at Delft University of Technology. We also survey 84 students and seven of our teaching assistants on their perceptions. Our results help educators not only to propose pragmatic software testing courses in their faculties, but also bring understanding on the challenges that software testing students face when taking software testing courses.},
	numpages     = 7,
	keywords     = {software engineering education, computer science education., software testing education}
}
@inproceedings{Whalley2014,
	title        = {How Difficult Are Novice Code Writing Tasks? A Software Metrics Approach},
	author       = {Whalley, Jacqueline and Kasto, Nadia},
	year         = 2014,
	booktitle    = {16th Australasian Computing Education Conference - Volume 148},
	location     = {Auckland, New Zealand},
	publisher    = {Australian Computer Society, Inc.},
	address      = {AUS},
	series       = {ACE '14},
	pages        = {105–112},
	isbn         = 9781921770319,
	abstract     = {In this paper we report on an empirical study into the use of software metrics as a way of estimating the difficulty of code writing tasks. Our results indicate that software metrics can provide useful information about the difficulties inherent in code writing in first year programming assessment. We conclude that software metrics may be a useful tool to assist in the design and selection of questions when setting an examination.},
	numpages     = 8,
	keywords     = {software metrics, novice programmers, code writing, assessment}
}
@inproceedings{Edwards2003,
	title        = {Teaching Software Testing: Automatic Grading Meets Test-First Coding},
	author       = {Edwards, Stephen H.},
	year         = 2003,
	booktitle    = {Companion of the 18th Annual ACM SIGPLAN Conference on Object-Oriented Programming, Systems, Languages, and Applications},
	location     = {Anaheim, CA, USA},
	publisher    = {ACM},
	
	series       = {OOPSLA '03},
	pages        = {318–319},
	doi          = {10.1145/949344.949431},
	isbn         = 1581137516,
	url          = {https://doi.org/10.1145/949344.949431},
	abstract     = {A new approach to teaching software testing is proposed: students use test-driven development on programming assignments, and an automated grading tool assesses their testing performance and provides feedback. The basics of the approach, screenshots of the sytem, and a discussion of industrial tool use for grading Java programs are discussed.},
	numpages     = 2,
	keywords     = {laboratory-based teaching, test-driven development, Java, CS1, extreme programming},
	language     = {English},
	source       = {Crossref},
	subtitle     = {automatic grading meets test-first coding}
}
@article{tuoisi2018coding,
	title        = {Coding skills as a success factor for a society},
	author       = {Tuomi, Pauliina and Multisilta, Jari and Saarikoski, Petri and Suominen, Jaakko},
	year         = 2018,
	journal      = {Education and Information Technologies},
	publisher    = {Springer},
	volume       = 23,
	number       = 1,
	pages        = {419--434}
}
@book{wohlin2012experimentation,
	title        = {Experimentation in Software Engineering},
	author       = {Claes Wohlin and Per Runeson and Martin H\"{o}st and Magnus C. Ohlsson and Bj\"{o}rn Regnell and Anders Wessl{\'{e}}n},
	year         = 2012,
	publisher    = {Springer Berlin Heidelberg},
	address      = {Berlin},
	doi          = {10.1007/978-3-642-29044-2},
	url          = {https://doi.org/10.1007/978-3-642-29044-2}
}
@book{Beizer1990,
	title        = {Software Testing Techniques (2nd Ed.)},
	author       = {Beizer, Boris},
	year         = 1990,
	publisher    = {Van Nostrand Reinhold Co.},
	address      = {New York},
	isbn         = {0442206720}
}
@article{Barriocanal2002,
	title        = {An experience in integrating automated unit testing practices in an introductory programming course},
	author       = {Barriocanal, Elena Garc\'{\i}a and Urb\'{a}n, Miguel-\'{A}ngel Sicilia and Cuevas, Ignacio Aedo and P\'{e}rez, Paloma D\'{\i}az},
	year         = 2002,
	month        = dec,
	journal      = {SIGCSE Bull.},
	publisher    = {ACM},
	volume       = 34,
	number       = 4,
	pages        = {125--128},
	doi          = {10.1145/820127.820183},
	isbn         = {0097-8418},
	issn         = {0097-8418},
	url          = {https://doi.org/10.1145/820127.820183},
	abstract     = {Unit testing is one of the core practices in the Extreme Programming lightweight software development method, and it is usually carried out with the help of software frameworks that ease the construction of test cases as an integral part of programming tasks. This work describes our first results in studying the integration of automated unit testing practices in conventional 'introduction to programming' laboratories. Since the work used a classical procedural language in the course's assignments, we had to design a specific testing framework called tpUnit. The results of the experiment points out that a straightforward approach for the integration of unit testing in first-semester courses do not result in the expected outcomes in terms of student's engagement in the practice.},
	language     = {English},
	source       = {Crossref}
}
@book{blueJbook_BK2020,
	title        = {Objects First with Java: {A} Practical Introduction Using {BlueJ}},
	author       = {Barnes, David J. and Klling, Michael},
	year         = 2020,
	publisher    = {PEARSON},
	address      = {USA},
	edition      = {6th},
	abstract     = {Objects First with Java: A Practical Introduction Using BlueJ, 5e, is ideal for introductory courses in Java/Introduction to Programming and Object-Oriented Programming and for beginning programmers.This is the only introductory programming textbook that uses the BlueJ integrated development environment (IDE) to teach introductory and object-oriented programming principles using Java. Its close integration with the BlueJdevelopment environment allows this book tofocus on key aspects of object-oriented software development from day one. BlueJ's clear visualization of classes and objects means that readers can immediately appreciate the differences between them, and gain a much better understanding of the nature of an object than theywould from simply reading source code. Unlike traditional textbooks, the chapters are not ordered by language features but by software development concepts. Language features are introduced as a response to the problems to be solved. A large numberof different, interesting projects are used to provide variety and avoid the monotony of a running problem. This book takes an objects first approach to teaching the traditionally difficult concepts of objects in a manipulative visual form. Throughout, the emphasis is on developing a practical approach to programming, with students encouraged to add code to existing programs rather than working with an intimidating sheet of blank paper. This textbook is printed in four-color to aid pedagogy and reader learning.}
}
@inproceedings{braught2016,
	title        = {Tool Design and Student Testing Behavior in an Introductory Java Course},
	author       = {Braught, Grant and Midkiff, James},
	year         = 2016,
	month        = feb,
	booktitle    = {47th ACM Technical Symposium on Computing Science Education},
	publisher    = {ACM},
	pages        = {449--454},
	doi          = {10.1145/2839509.2844641},
	url          = {https://doi.org/10.1145/2839509.2844641},
	source       = {Crossref}
}
@article{Desai2008,
	title        = {A survey of evidence for test-driven development in academia},
	author       = {Desai, Chetan and Janzen, David and Savage, Kyle},
	year         = 2008,
	month        = jun,
	journal      = {SIGCSE Bull.},
	publisher    = {ACM},
	volume       = 40,
	number       = 2,
	pages        = {97--101},
	doi          = {10.1145/1383602.1383644},
	issn         = {0097-8418},
	url          = {https://doi.org/10.1145/1383602.1383644},
	file         = {:Desai2008 - A Survey of Evidence for Test Driven Development in Academia.pdf:PDF;:Desai2008 - A Survey of Evidence for Test Driven Development in Academia.pdf:PDF},
	groups       = {TILDE},
	source       = {Crossref}
}
@article{DJC2009,
	title        = {Implications of integrating test-driven development into {CS1/CS2} curricula},
	author       = {Desai, Chetan and Janzen, David S. and Clements, John},
	year         = 2009,
	month        = mar,
	journal      = {SIGCSE Bull.},
	booktitle    = {40th ACM Technical Symposium on Computer Science Education},
	location     = {Chattanooga, TN, USA},
	publisher    = {ACM},
	
	series       = {SIGCSE {\textquoteright }09},
	volume       = 41,
	number       = 1,
	pages        = {148--152},
	doi          = {10.1145/1539024.1508921},
	isbn         = 1605581836,
	issn         = {0097-8418},
	url          = {https://doi.org/10.1145/1539024.1508921},
	abstract     = {Many academic and industry professionals have called for more testing in computer science curricula. Test-driven development (TDD) has been proposed as a solution to improve testing in academia. This paper demonstrates how TDD can be integrated into existing course materials without reducing topic coverage. Two controlled experiments were conducted in a CS1/CS2 course in Winter 2008. Following a test-driven learning approach, unit testing was introduced at the beginning of the course and reinforced through example. Results indicate that while student work loads may increase with the incorporation of TDD, students are able to successfully develop unit tests while learning to program.},
	abstractnote = {Many academic and industry professionals have called for more testing in computer science curricula. Test-driven development (TDD) has been proposed as a solution to improve testing in academia. This paper demonstrates how TDD can be integrated into existing course materials without reducing topic coverage. Two controlled experiments were conducted in a CS1/CS2 course in Winter 2008. Following a test-driven learning approach, unit testing was introduced at the beginning of the course and reinforced through example. Results indicate that while student work loads may increase with the incorporation of TDD, students are able to successfully develop unit tests while learning to program.},
	collection   = {SIGCSE {\textquoteright }09},
	date         = {2009-03},
	file         = {:Desai2009 - Implications of Integrating Test Driven Development into CS1\_CS2 Curricula.pdf:PDF;:Desai2009 - Implications of Integrating Test Driven Development into CS1\_CS2 Curricula.pdf:PDF},
	groups       = {TILDE},
	issue_date   = {March 2009},
	keywords     = {test-driven learning, cs2, test-driven development, cs1},
	numpages     = 5,
	source       = {Crossref}
}
@article{Edwards2003a,
	title        = {Improving student performance by evaluating how well students test their own programs},
	author       = {Edwards, Stephen H.},
	year         = 2003,
	month        = 9,
	journal      = {J. Educ. Resour. Comput.},
	publisher    = {ACM},
	
	volume       = 3,
	number       = 3,
	pages        = 1,
	doi          = {10.1145/1029994.1029995},
	issn         = {1531-4278, 1531-4278},
	url          = {https://doi.org/10.1145/1029994.1029995},
	abstract     = {Students need to learn more software testing skills. This paper presents an approach to teaching software testing in a way that will encourage students to practice testing skills in many classes and give them concrete feedback on their testing performance, without requiring a new course, any new faculty resources, or a significant number of lecture hours in each course where testing will be practiced. The strategy is to give students basic exposure to test-driven development, and then provide an automated tool that will assess student submissions on-demand and provide feedback for improvement. This approach has been demonstrated in an undergraduate programming languages course using a prototype tool. The results have been positive, with students expressing appreciation for the practical benefits of test-driven development on programming assignments. Experimental analysis of student programs shows a 28 percent reduction in defects per thousand lines of code.},
	issue_date   = {September 2003},
	keywords     = {teaching software testing, extreme programming, test-first coding, test-driven development, agile methods},
	numpages     = 24,
	source       = {Crossref}
}
@inproceedings{Edwards2004,
	title        = {Using software testing to move students from trial-and-error to reflection-in-action},
	author       = {Edwards, Stephen H.},
	year         = 2004,
	month        = {mar},
	journal      = {SIGCSE Bull.},
	booktitle    = {35th SIGCSE technical symposium on Computer science education - SIGCSE '04},
	location     = {Norfolk, Virginia, USA},
	publisher    = {ACM Press},
	
	series       = {SIGCSE '04},
	volume       = 36,
	number       = 1,
	pages        = {26--30},
	doi          = {10.1145/971300.971312},
	isbn         = 1581137982,
	issn         = {0097-8418},
	url          = {https://doi.org/10.1145/971300.971312},
	abstract     = {Introductory computer science students rely on a trial and error approach to fixing errors and debugging for too long. Moving to a reflection in action strategy can help students become more successful. Traditional programming assignments are usually assessed in a way that ignores the skills needed for reflection in action, but software testing promotes the hypothesis-forming and experimental validation that are central to this mode of learning. By changing the way assignments are assessed--where students are responsible for demonstrating correctness through testing, and then assessed on how well they achieve this goal--it is possible to reinforce desired skills. Automated feedback can also play a valuable role in encouraging students while also showing them where they can improve.},
	keywords     = {extreme programming, test-driven development, CS1, pedagogy, automated grading},
	numpages     = 5,
	source       = {Crossref},
	issue_date   = {March 2004}
}
@inproceedings{Edwardsetal2014,
	title        = {Do student programmers all tend to write the same software tests?},
	author       = {Edwards, Stephen H. and Shams, Zalia},
	year         = 2014,
	booktitle    = { 2014 conference on Innovation \& technology in computer science education - ITiCSE '14},
	location     = {Uppsala, Sweden},
	publisher    = {ACM},
	
	series       = {ITiCSE '14},
	pages        = {171--176},
	doi          = {10.1145/2591708.2591757},
	isbn         = 9781450328333,
	url          = {https://doi.org/10.1145/2591708.2591757},
	keywords     = {automated grading, test quality, program assignments, automated assessment, test coverage, software testing, mutation testing, happy path},
	numpages     = 6,
	source       = {Crossref}
}
@inproceedings{Elbaum2007,
	title        = {Bug Hunt: {Making} Early Software Testing Lessons Engaging and Affordable},
	author       = {Elbaum, Sebastian and Person, Suzette and Dokulil, Jon and Jorde, Matt},
	year         = 2007,
	month        = may,
	booktitle    = {29th International Conference on Software Engineering (ICSE'07)},
	publisher    = {IEEE},
	address      = {Minneapolis, MN, USA},
	pages        = {688--697},
	doi          = {10.1109/icse.2007.23},
	isbn         = {0270-5257},
	url          = {https://doi.org/10.1109/icse.2007.23},
	abstract     = {Software testing efforts account for a large part of software development costs. However, as educators, we struggle to properly prepare students to perform software testing activities. This struggle is caused by multiple factors: 1) it is challenging to effectively incorporate software testing into an already over-packed curriculum, 2) ad-hoc efforts to teach testing generally happen too late in the students' career, after bad habits have already been developed, and 3) these efforts lack the necessary institutional consistency and support to be effective. To address these challenges we created Bug Hunt, a web-based tutorial to engage students in learning software testing strategies. In this paper we describe the most interesting aspects of the tutorial including the lessons and feedback mechanisms, and the facilities for instructors to configure the tutorial and obtain automatic student assessment. We also present the lessons learned after two years of deployment.},
	keywords     = {Computer science; Computer science education; Costs; Courseware; Engineering profession; Feedback; Performance evaluation; Programming profession; Software engineering; Software testing; Software Testing Education; Web-based Tutorial},
	language     = {English},
	source       = {Crossref}
}
@inproceedings{Gauravaram2012,
	title        = {Security Analysis of salt\vert{}\vert{}password Hashes},
	author       = {Gauravaram, Praveen},
	year         = 2012,
	month        = nov,
	booktitle    = {2012 International Conference on Advanced Computer Science Applications and Technologies (ACSAT)},
	publisher    = {IEEE},
	pages        = {25--30},
	doi          = {10.1109/acsat.2012.49},
	url          = {https://doi.org/10.1109/acsat.2012.49},
	groups       = {TILDE},
	source       = {Crossref}
}
@inproceedings{Hoch2008,
	title        = {On the Strength of the Concatenated Hash Combiner When All the Hash Functions Are Weak},
	author       = {Hoch, Jonathan J. and Shamir, Adi},
	year         = 2008,
	booktitle    = {Automata, Languages and Programming},
	publisher    = {Springer Berlin Heidelberg},
	address      = {Berlin, Heidelberg},
	pages        = {616--630},
	isbn         = {978-3-540-70583-3},
	editor       = {Aceto, Luca and Damg{\aa}rd, Ivan and Goldberg, Leslie Ann and Halld{\'o}rsson, Magn{\'u}s M. and Ing{\'o}lfsd{\'o}ttir, Anna and Walukiewicz, Igor},
	abstract     = {At Crypto 2004 Joux showed a novel attack against the concatenated hash combiner instantiated with Merkle-Damg{\aa }rd iterated hash functions. His method of producing multicollisions in the design was the first in a recent line of generic attacks against the Merkle-Damg{\aa }rd construction. In the same paper, Joux raised an open question concerning the strength of the concatenated hash combiner and asked whether his attack can be improved when the attacker can efficiently find collisions in both underlying compression functions. We solve this open problem by showing that even in the powerful adversarial scenario first introduced by Liskov (SAC 2006) in which the underlying compression functions can be fully inverted (which implies that collisions can be easily generated), collisions in the concatenated hash cannot be created using fewer than 2n/2 queries. We then expand this result to include the double pipe hash construction of Lucks from Asiacrypt 2005. One of the intermediate results is of interest on its own and provides the first streamable construction provably indifferentiable from a random oracle in this model.},
	groups       = {TILDE}
}
@book{hogan2015,
	title        = {Exercises for Programmers},
	author       = {Hogan, Brian P},
	year         = 2015,
	month        = sep,
	publisher    = {Pragmatic Bookshelf},
	address      = {Raleigh, NC},
	language     = {en}
}
@misc{Isomottonen2012,
	title        = {{CSI} with games and an emphasis on {TDD} and unit testing: {Piling} a trend upon a trend},
	author       = {Isom\"{o}tt\"{o}nen, Ville and Lappalainen, Vesa},
	year         = 2012,
	journal      = {ACM Inroads},
	volume       = 3,
	number       = 3,
	pages        = {62--68},
	doi          = {10.1145/2339055.2339073},
	isbn         = {2153-2184},
	keywords     = {CS1; game programming; TDD},
	language     = {English}
}
@inproceedings{Janzen2006,
	title        = {Test-driven learning},
	author       = {Janzen, David S. and Saiedian, Hossein},
	year         = 2006,
	month        = mar,
	journal      = {SIGCSE Bull.},
	booktitle    = { 37th SIGCSE technical symposium on Computer science education - SIGCSE '06},
	location     = {Houston, Texas, USA},
	publisher    = {ACM Press},

	series       = {SIGCSE {\textquoteright }06},
	volume       = 38,
	number       = 1,
	pages        = {254--258},
	doi          = {10.1145/1121341.1121419},
	isbn         = 9781595932594,
	issn         = {0097-8418},
	url          = {https://doi.org/10.1145/1121341.1121419},
	abstract     = {Test-driven learning (TDL) is an approach to teaching computer programming that involves introducing and exploring new concepts through automated unit tests. TDL offers the potential of teaching testing for free, of improving programmer comprehension and ability, and of improving software quality both in terms of design quality and reduced defect density.This paper introduces test-driven learning as a pedagogical tool. It will provide examples of how TDL can be incorporated at multiple levels in computer science and software engineering curriculum for beginning through professional programmers. In addition, the relationships between TDL and test-driven development will be explored.Initial evidence indicates that TDL can improve student comprehension of new concepts while improving their testing skills with no additional instruction time. In addition, by learning to construct programs in a test-driven manner, students are expected to be more likely to develop their own code with a test-driven approach, likely resulting in improved software designs and quality.},
	abstractnote = {Test-driven learning (TDL) is an approach to teaching computer programming that involves introducing and exploring new concepts through automated unit tests. TDL offers the potential of teaching testing for free, of improving programmer comprehension and ability, and of improving software quality both in terms of design quality and reduced defect density.This paper introduces test-driven learning as a pedagogical tool. It will provide examples of how TDL can be incorporated at multiple levels in computer science and software engineering curriculum for beginning through professional programmers. In addition, the relationships between TDL and test-driven development will be explored.Initial evidence indicates that TDL can improve student comprehension of new concepts while improving their testing skills with no additional instruction time. In addition, by learning to construct programs in a test-driven manner, students are expected to be more likely to develop their own code with a test-driven approach, likely resulting in improved software designs and quality.},
	collection   = {SIGCSE {\textquoteright }06},
	groups       = {TILDE},
	keywords     = {test-driven development, test-driven learning, CS1, pedagogy, extreme programming},
	numpages     = 5,
	source       = {Crossref},
	subtitle     = {intrinsic integration of testing into the CS/SE curriculum},
	issue_date   = {March 2006}
}
@article{JS2008,
	title        = {Test-driven learning in early programming courses},
	author       = {Janzen, David and Saiedian, Hossein},
	year         = 2008,
	month        = feb,
	journal      = {SIGCSE Bull.},
	booktitle    = {39th SIGCSE Technical Symposium on Computer Science Education},
	location     = {Portland, OR, USA},
	publisher    = {ACM},
	
	series       = {SIGCSE '08},
	volume       = 40,
	number       = 1,
	pages        = {532--536},
	doi          = {10.1145/1352322.1352315},
	isbn         = 9781595937995,
	issn         = {0097-8418},
	url          = {https://doi.org/10.1145/1352322.1352315},
	abstract     = {Coercing new programmers to adopt disciplined development practices such as thorough unit testing is a challenging endeavor. Test-driven development (TDD) has been proposed as a solution to improve both software design and testing. Test-driven learning (TDL) has been proposed as a pedagogical approach for teaching TDD without imposing significant additional instruction time.This research evaluates the effects of students using a test-first (TDD) versus test-last approach in early programming courses, and considers the use of TDL on a limited basis in CS1 and CS2. Software testing, programmer productivity, programmer performance, and programmer opinions are compared between test-first and test-last programming groups. Results from this research indicate that a test-first approach can increase student testing and programmer performance, but that early programmers are very reluctant to adopt a test-first approach, even after having positive experiences using TDD. Further, this research demonstrates that TDL can be applied in CS1/2, but suggests that a more pervasive implementation of TDL may be necessary to motivate and establish disciplined testing practice among early programmers.},
	issue_date   = {March 2008},
	keywords     = {cs1, pedagogy, test-driven learning, test-driven development},
	numpages     = 5,
	source       = {Crossref}
}
@article{Mouha2018,
	title        = {Finding Bugs in Cryptographic Hash Function Implementations},
	author       = {Mouha, Nicky and Raunak, Mohammad S. and Kuhn, D. Richard and Kacker, Raghu},
	year         = 2018,
	month        = sep,
	journal      = {IEEE Trans. Rel.},
	publisher    = {IEEE},
	volume       = 67,
	number       = 3,
	pages        = {870--884},
	doi          = {10.1109/tr.2018.2847247},
	issn         = {0018-9529, 1558-1721},
	url          = {https://doi.org/10.1109/tr.2018.2847247},
	abstract     = {Cryptographic hash functions are security-critical algorithms with many practical applications, notably in digital signatures. Developing an approach to test them can be particularly difficult, and bugs can remain unnoticed for many years. We revisit the National Institute of Standards and Technology hash function competition, which was used to develop the SHA-3 standard, and apply a new testing strategy to all available reference implementations. Motivated by the cryptographic properties that a hash function should satisfy, we develop four tests. The Bit-Contribution Test checks if changes in the message affect the hash value, and the Bit-Exclusion Test checks that changes beyond the last message bit leave the hash value unchanged. We develop the Update Test to verify that messages are processed correctly in chunks, and then use combinatorial testing methods to reduce the test set size by several orders of magnitude while retaining the same fault-detection capability. Our tests detect bugs in 41 of the 86 reference implementations submitted to the SHA-3 competition, including the rediscovery of a bug in all submitted implementations of the SHA-3 finalist BLAKE. This bug remained undiscovered for seven years, and is particularly serious because it provides a simple strategy to modify the message without changing the hash value returned by the implementation. We detect these bugs using a fully automated testing approach.},
	groups       = {TILDE},
	source       = {Crossref}
}
@book{payne2015teach,
	title        = {Teach Your Kids to Code: {A} Parent-Friendly Guide to Python Programming},
	author       = {Payne, B.},
	year         = 2015,
	publisher    = {No Starch Press},
	address      = {San Francisco},
	isbn         = 9781593276812,
	url          = {https://books.google.es/books?id=egYvDwAAQBAJ},
	lccn         = 2015006794
}
@techreport{Rukhin2001,
	title        = {A statistical test suite for random and pseudorandom number generators for cryptographic applications},
	author       = {Bassham, L E and Rukhin, A L and Soto, J and Nechvatal, J R and Smid, M E and Barker, E B and Leigh, S D and Levenson, M and Vangel, M and Banks, D L and Heckert, N A and Dray, J F and Vo, S},
	year         = 2010,
	doi          = {10.6028/nist.sp.800-22r1a},
	url          = {https://doi.org/10.6028/nist.sp.800-22r1a},
	groups       = {TILDE},
	school       = {Booz-allen and hamilton inc mclean va},
	source       = {Crossref},
	institution  = {National Institute of Standards and Technology}
}
@inproceedings{Scatalonetal2019,
	title        = {Software Testing in Introductory Programming Courses},
	shorttitle   = {Software {Testing} in {Introductory} {Programming} {Courses}},
	author       = {Scatalon, Lilian Passos and Carver, Jeffrey C. and Garcia, Rog\'{e}rio Eduardo and Barbosa, Ellen Francine},
	year         = 2019,
	month        = feb,
	booktitle    = { 50th ACM Technical Symposium on Computer Science Education},
	location     = {Minneapolis, MN, USA},
	publisher    = {ACM},
	
	series       = {SIGCSE '19},
	pages        = {421--427},
	doi          = {10.1145/3287324.3287384},
	isbn         = 9781450358903,
	url          = {https://doi.org/10.1145/3287324.3287384},
	urldate      = {2021-10-31},
	abstract     = {Traditionally, students learn about software testing during intermediate or advanced computing courses. However, it is widely advocated that testing should be addressed beginning in introductory programming courses. In this context, testing practices can help students think more critically while working on programming assignments. At the same time, students can develop testing skills throughout the computing curriculum. Considering this scenario, we conducted a systematic mapping of the literature about software testing in introductory programming courses, resulting in 293 selected papers. We mapped the papers to categories with respect to their investigated topic (curriculum, teaching methods, programming assignments, programming process, tools, program/test quality, concept understanding, and students' perceptions and behaviors) and evaluation method (literature review, exploratory study, descriptive/persuasive study, survey, qualitative study, experimental and experience report). We also identified the benefits and drawbacks of this teaching approach, as pointed out in the selected papers. The goal is to provide an overview of research performed in the area, highlighting gaps that should be further investigated.},
	keywords     = {introductory programming courses, software testing, systematic mapping},
	numpages     = 7,
	source       = {Crossref},
	subtitle     = {A Systematic Mapping Study},
	date         = {2019-02},
	abstractnote = {Traditionally, students learn about software testing during intermediate or advanced computing courses. However, it is widely advocated that testing should be addressed beginning in introductory programming courses. In this context, testing practices can help students think more critically while working on programming assignments. At the same time, students can develop testing skills throughout the computing curriculum. Considering this scenario, we conducted a systematic mapping of the literature about software testing in introductory programming courses, resulting in 293 selected papers. We mapped the papers to categories with respect to their investigated topic (curriculum, teaching methods, programming assignments, programming process, tools, program/test quality, concept understanding, and students{ \textquoteright} perceptions and behaviors) and evaluation method (literature review, exploratory study, descriptive/persuasive study, survey, qualitative study, experimental and experience report). We also identified the benefits and drawbacks of this teaching approach, as pointed out in the selected papers. The goal is to provide an overview of research performed in the area, highlighting gaps that should be further investigated.},
	collection   = {SIGCSE {\textquoteright}19},
	language     = {en}
}
@inproceedings{Souza2011,
	title        = {ProgTest: An environment for the submission and evaluation of programming assignments based on testing activities},
	author       = {Souza, Draylson and Maldonado, Jos\'{e} and Barbosa, Ellen},
	year         = 2011,
	month        = {05},
	booktitle    = {2011 24th IEEE-CS Conference on Software Engineering Education and Training (CSEE T)},
	publisher    = {IEEE},
	address      = {Waikiki, Honolulu, HI, USA},
	pages        = {1--10},
	doi          = {10.1109/CSEET.2011.5876088}
}
@article{Souza2015,
	title        = {Teaching novice programmers using {ProgTest}},
	author       = {Souza, Draylson Micael De and Isotani, Seiji and Barbosa, Ellen Francine},
	year         = 2015,
	journal      = {IJKL},
	publisher    = {Inderscience Publishers},
	volume       = 10,
	number       = 1,
	pages        = 60,
	doi          = {10.1504/ijkl.2015.071054},
	isbn         = {1741-1009},
	issn         = {1741-1009, 1741-1017},
	url          = {https://doi.org/10.1504/ijkl.2015.071054},
	abstract     = {Programming foundations is not an easy subject to be taught, mainly because of the abstract concepts that need to be mastered. On the other hand, experiences have suggested that the early mastering of testing concepts can contribute to enhance the students' skills of comprehension and analysis of programs. Aiming at addressing the integrated teaching of programming and testing practices, automatic test-based assessment systems have been developed and adopted in programming courses. In this paper we discuss the use of ProgTest - a test-based assessment tool which provides an immediate feedback to students regarding the quality of the programs developed and the test cases designed. ProgTest was applied to a group of undergraduate students of an introductory programming course. In short, the outcomes suggest that the constant and concrete feedback provided by the tool was useful for helping students to improve their assignments, both in terms of programming and testing.},
	language     = {English},
	source       = {Crossref}
}
@unknown{Tebes2020,
	title        = {{TestTDO} v1.2's Terms, Properties, Relationships and Axioms -- A Top-Domain Software Testing Ontology},
	author       = {Tebes, Guido and Peppino, Denis and Becker, Pablo and Olsina, Luis},
	year         = 2020,
	month        = oct,
	groups       = {TILDE}
}
@inproceedings{Whalley2011,
	title        = {A Unit Testing Approach to Building Novice Programmers' Skills and Confidence},
	author       = {Whalley, Jacqueline L. and Philpott, Anne},
	year         = 2011,
	booktitle    = { 13th Australasian Computing Education Conference - Volume 114},
	location     = {Perth, Australia},
	publisher    = {Australian Computer Society, Inc.},
	address      = {AUS},
	series       = {ACE '11},
	pages        = {113–118},
	isbn         = 9781920682941,
	abstract     = {This paper discusses the integration of unit tests into a first semester programming course. The students were supplied with unit tests to support their learning and assessments. A questionnaire was completed by the student cohort about their use and perceptions of these unit tests. As a result of both the students and our experiences we examine the advantages and disadvantages of introducing unit tests early and make some pedagogical recommendations for the introduction and use of unit tests in first year programming.},
	numpages     = 6,
	keywords     = {assessment, testing, novice programmers}
}
@article{Beller2019,
	title        = {Developer Testing in the {IDE:} {Patterns,} Beliefs, and Behavior},
	author       = {Beller, Moritz and Gousios, Georgios and Panichella, Annibale and Proksch, Sebastian and Amann, Sven and Zaidman, Andy},
	year         = 2019,
	
	journal      = {IEEE Trans. Software Eng.},
	publisher    = {IEEE},
	volume       = 45,
	number       = 3,
	pages        = {261--284},
	doi          = {10.1109/tse.2017.2776152},
	issn         = {0098-5589, 1939-3520, 2326-3881},
	url          = {https://doi.org/10.1109/tse.2017.2776152},
	source       = {Crossref}
}
@misc{Doorn_Test_Informed_Learning_2021,
	title        = {{Test Informed Learning with Examples assignments}},
	author       = {Doorn, Niels and Vos, Tanja and Mar\'{\i}n, Beatriz},
	year         = 2021,
	month        = sep,
	url          = {https://tile-repository.github.io/TILES/}
}
@misc{Bach2003,
	title        = {Exploratory testing explained},
	author       = {Bach, James},
	year         = 2003
}
@misc{convert1,
	title        = {www.metric-conversions.org/temperature/fahrenheit-to-celsius.html},
	author       = {Ltd., Wight Hat},
	year         = 2021,
	note         = {last accessed 01-10-2021}
}
@misc{convert2,
	title        = {www.rapidtables.com/convert/temperature/fahrenheit-to-celsius.html},
	author       = {Rapidtables},
	year         = 2021,
	note         = {last accessed 01-10-2021}
}
@book{KRL13,
	title        = {Introduction to Combinatorial Testing},
	author       = {Kuhn, D. Richard and Kacker, Raghu N. and Lei, Yu},
	year         = 2016,
	month        = apr,
	publisher    = {Chapman and Hall/CRC},
	address      = {UK},
	doi          = {10.1201/b14957},
	isbn         = 9781466552302,
	url          = {https://doi.org/10.1201/b14957},
	language     = {en},
	edition      = {1st},
	abstract     = {Combinatorial testing of software analyzes interactions among variables using a very small number of tests. This advanced approach has demonstrated success in providing strong, low-cost testing in real-world situations. Introduction to Combinatorial Testing presents a complete self-contained tutorial on advanced combinatorial testing methods for real-world software. The book introduces key concepts and procedures of combinatorial testing, explains how to use software tools for generating combinatorial tests, and shows how this approach can be integrated with existing practice. Detailed explanations and examples clarify how and why to use various techniques. Sections on cost and practical considerations describe tradeoffs and limitations that may impact resources or funding. While the authors introduce some of the theory and mathematics of combinatorial methods, readers can use the methods without in-depth knowledge of the underlying mathematics. Accessible to undergraduate students and researchers in computer science and engineering, this book illustrates the practical application of combinatorial methods in software testing. Giving pointers to freely available tools and offering resources on a supplementary website, the book encourages readers to apply these methods in their own testing projects.},
	source       = {Crossref}
}
@inproceedings{Goletti2021,
	title        = {Tutors' Experiences in Using Explicit Strategies in a Problem-Based Learning Introductory Programming Course},
	author       = {Goletti, Olivier and Mens, Kim and Hermans, Felienne},
	year         = 2021,
	booktitle    = {26th ACM Conference on Innovation and Technology in Computer Science Education V. 1},
	location     = {Virtual Event, Germany},
	publisher    = {ACM},
	
	series       = {ITiCSE '21},
	pages        = {157–163},
	doi          = {10.1145/3430665.3456348},
	isbn         = 9781450382144,
	url          = {https://doi.org/10.1145/3430665.3456348},
	abstract     = {In programming education, explicit strategies are gaining traction. The reason for this study was to improve an introductory programming course based on a problem-based methodology, by using more explicit programming strategies. After analysing a previous run of this course for first year undergraduate students, we concluded that such strategies could improve learning transfer for students across the different weeks of the semester. We introduced four instructional strategies to tutors with close to no pedagogical background: explicit tracing, subgoal labeled worked examples, Parsons problems and explicit problem solving. These explicit programming strategies aim to decrease cognitive load. Tutors tested these four strategies in the course.Our goal was to explore how tutors could benefit in their tutoring from explicit strategies. Interviews with the tutors show that the easiest and most effective of the tested strategies were best used. For the more elaborate strategies, more time should be devoted to explain and model them or they can be misunderstood and misapplied.We conclude that four criteria are key to successfully using an explicit strategy: easy to understand, straightforward to apply, useful on the long term and supported by literature.},
	numpages     = 7,
	keywords     = {explicit programming strategies, cognitive load, problem-based learning}
}
@inproceedings{Denny2019,
	title        = {A Closer Look at Metacognitive Scaffolding: Solving Test Cases Before Programming},
	author       = {Denny, Paul and Prather, James and Becker, Brett A. and Albrecht, Zachary and Loksa, Dastyni and Pettit, Raymond},
	year         = 2019,
	booktitle    = {19th Koli Calling International Conference on Computing Education Research},
	location     = {Koli, Finland},
	publisher    = {ACM},
	
	series       = {Koli Calling '19},
	doi          = {10.1145/3364510.3366170},
	isbn         = 9781450377157,
	url          = {https://doi-org.ezproxy.elib11.ub.unimaas.nl/10.1145/3364510.3366170},
	abstract     = {Prior research has shown that novices face metacognitive difficulties associated with understanding problem statements. Metacognition refers to the processes that an individual uses to plan, monitor, and assess their own understanding and performance and is often described as "thinking about thinking." Metacognitive awareness is a higher-order thinking skill that includes knowing when and how to use particular strategies for problem-solving. However, novice students often lack metacognitive skills. This can be a disadvantage, particularly when learning in unfamiliar domains. For instance, students who misinterpret a problem statement will most likely form an invalid mental model of the problem which they may find difficult to correct. A prior think-aloud study that used an intervention focused on this initial step in the problem-solving process showed promising results at a small scale. In this paper, we report on a large (n = 976) controlled experiment to examine the scalability of the aforementioned study. We measure the effect on novice programmer performance of metacognitive scaffolding that requires deliberate reflection on the problem statement before any code is written. Although control and experimental groups exhibited similar completion rates overall, students in the experimental group encountered significantly fewer errors that related to the formation of an incorrect mental model of the problem. These results hold promise in moving towards more reliable methods for developing metacognitive awareness in novice programmers.},
	articleno    = 11,
	numpages     = 10,
	keywords     = {automated assessment tools, metacognitive awareness, CS1}
}
@inproceedings{Dragon2016,
	title        = {Memory Diagrams: A Consistant Approach Across Concepts and Languages},
	author       = {Dragon, Toby and Dickson, Paul E.},
	year         = 2016,
	booktitle    = {47th ACM Technical Symposium on Computing Science Education},
	location     = {Memphis, Tennessee, USA},
	publisher    = {ACM},
	
	series       = {SIGCSE '16},
	pages        = {546–551},
	doi          = {10.1145/2839509.2844607},
	isbn         = 9781450336857,
	url          = {https://doi-org.ezproxy.elib10.ub.unimaas.nl/10.1145/2839509.2844607},
	abstract     = {Hand-drawn memory diagrams are frequently used in computer science to demonstrate new programming concepts and support students' understanding of program functionality. These diagrams often vary among courses, instructors, and languages, which confuse students moving through the curriculum. Consistent memory diagrams throughout a curriculum not only alleviate confusion but offer a scaffold for students to transfer their understanding between courses taught at different levels of complexity and in different languages. We describe our standardized system for memory diagrams as it is used in our curriculum to demonstrate this scaffolding process through multiple concepts and programming languages.},
	numpages     = 6,
	keywords     = {memory diagram, pedagogy, tracing, program memory traces, computer science education}
}
@inproceedings{Margulieux2019,
	title        = {Design and Pilot Testing of Subgoal Labeled Worked Examples for Five Core Concepts in CS1},
	author       = {Margulieux, Lauren E. and Morrison, Briana B. and Decker, Adrienne},
	year         = 2019,
	booktitle    = { 2019 ACM Conference on Innovation and Technology in Computer Science Education},
	location     = {Aberdeen, Scotland Uk},
	publisher    = {ACM},

	series       = {ITiCSE '19},
	pages        = {548–554},
	doi          = {10.1145/3304221.3319756},
	isbn         = 9781450368957,
	url          = {https://doi-org.ezproxy.elib10.ub.unimaas.nl/10.1145/3304221.3319756},
	abstract     = {Subgoal learning has improved student problem-solving performance in programming, but it has been tested for only one-to-two hours of instruction at a time. Our work pioneers implementing subgoal learning throughout an entire introductory programming course. In this paper we discuss the protocol that we used to identify subgoals for core programming procedures, present the subgoal labels created for the course, and outline the subgoal-labeled instructional materials that were designed for a Java-based course. To examine the effect of subgoal labeled materials on student performance in the course, we compared quiz and exam grades between students who learned using subgoal labels and those who learned using conventional materials. Initial results indicate that learning with subgoals improves performance on early applications of concepts. Moreover, variance in performance was lower and persistence in the course was higher for students who learned with subgoals compared to those who learned with conventional materials, suggesting that learning with subgoal labels may uniquely benefit students who would normally receive low grades or dropout of the course.},
	numpages     = 7,
	keywords     = {cs1, problem solving, subgoal learning, worked examples}
}
@article{Catrambone1998,
	title        = {The subgoal learning model: Creating better examples so that students can solve novel problems.},
	author       = {Catrambone, Richard},
	year         = 1998,
	journal      = {Journal of Experimental Psychology: General},
	volume       = 127,
	number       = 4,
	pages        = {355--376},
	issn         = {0096-3445},
	url          = {https://search-ebscohost-com.ezproxy.elib11.ub.unimaas.nl/login.aspx?direct=true\&db=pdh\&AN=1998-11111-002\&site=ehost-live},
	abstract     = {Learners have great difficulty solving problems requiring changes to solutions demonstrated in examples. However, if the solution procedures learners form are organized by subgoals, then they are more successful. Subgoal learning is hypothesized to be aided by cues in example solutions that indicate that certain steps go together. These cues may induce a learner to attempt to self-explain the purpose of the steps, resulting in the formation of a subgoal. Across 4 experiments it was found that a label for a group of steps in examples helped participants form subgoals as assessed by measures such as problem-solving performance and talk aloud protocols. Abstract labels were more likely than superficial labels to lead participants to form subgoals with fewer ties to surface features. Subgoals guide problem solving by helping learners focus on the steps to modify in novel problems that involve the same subgoals but require new steps to achieve them. (PsycINFO Database Record (c) 2016 APA,},
	keywords     = {labels as cues in formation of subgoals in solving novel problems, college students, test of subgoal learning model, Cues, Goals, Problem Solving, Stimulus Novelty, Transfer (Learning)}
}
@article{SCHWONKE2009,
	title        = {The worked-example effect: Not an artefact of lousy control conditions},
	author       = {Rolf Schwonke and Alexander Renkl and Carmen Krieg and J\"{o}rg Wittwer and Vincent Aleven and Ron Salden},
	year         = 2009,
	journal      = {Computers in Human Behavior},
	volume       = 25,
	number       = 2,
	pages        = {258--266},
	doi          = {https://doi.org/10.1016/j.chb.2008.12.011},
	issn         = {0747-5632},
	url          = {https://www.sciencedirect.com/science/article/pii/S0747563208002161},
	note         = {Including the Special Issue: State of the Art Research into Cognitive Load Theory},
	keywords     = {Example-based learning, Problem-solving, Tutoring, Cognitive Tutors, Intelligent tutoring systems},
	abstract     = {Recently it has been argued that the worked-example effect, as postulated by Cognitive Load Theory, might only occur when compared to unsupported problem-solving, but not when compared to well-supported or tutored problem-solving as instantiated, for example, in Cognitive Tutors. In two experiments, we compared a standard Cognitive Tutor with a version that was enriched with faded worked examples. In Experiment 1, students in the example condition needed less learning time to acquire a comparable amount of procedural skills and conceptual understanding. In Experiment 2, the efficiency advantage was replicated. In addition, students in the example condition acquired a deeper conceptual understanding. The present findings demonstrate that the worked-example effect is indeed robust and can be found even when compared to well-supported learning by problem-solving.}
}
@article{SWELLER2006,
	title        = {The worked example effect and human cognition},
	author       = {John Sweller},
	year         = 2006,
	journal      = {Learning and Instruction},
	volume       = 16,
	number       = 2,
	pages        = {165--169},
	doi          = {https://doi.org/10.1016/j.learninstruc.2006.02.005},
	issn         = {0959-4752},
	url          = {https://www.sciencedirect.com/science/article/pii/S0959475206000193},
	note         = {Recent Worked Examples Research: Managing Cognitive Load to Foster Learning and Transfer}
}
@article{DARABI2007,
	title        = {Acquisition of troubleshooting skills in a computer simulation: Worked example vs. conventional problem solving instructional strategies},
	author       = {A. Aubteen Darabi and David W. Nelson and Srinivas Palanki},
	year         = 2007,
	journal      = {Computers in Human Behavior},
	volume       = 23,
	number       = 4,
	pages        = {1809--1819},
	doi          = {https://doi.org/10.1016/j.chb.2005.11.001},
	issn         = {0747-5632},
	url          = {https://www.sciencedirect.com/science/article/pii/S0747563205000907},
	keywords     = {Simulation-based training, Computer-based training, Worked examples, Troubleshooting, Problem solving, Practice},
	abstract     = {In a computer-based simulation of a chemical processing plant, the differential effects of three instructional strategies for learning how to troubleshoot the plant's malfunctions were investigated. In an experiment concerning learners' transfer performance and mental effort, the simulation presented the three strategies to three groups of learners and measured their performance on the transfer tasks. In this experiment, conventional problem solving was contrasted with two worked example strategies. The results indicated a significant difference between practicing problem solving and using worked examples. Learners who practiced problem solving in an interactive simulation outperformed the learners who studied computer-based worked examples. They also invested lower mental effort in transfer tasks. When accounting for the difference in the learners' domain knowledge, the strategies were not significantly different among the more experienced learners. For the less experienced learners, those who practiced problem solving significantly outperformed their worked example counterparts. Among all participants and also among less experienced learners the problem solving group invested significantly lower mental effort in the performance of transfer tasks. Based on the results of this study, the authors recommend the use of the conventional problem solving strategy with or without worked examples for learning complex skills.}
}
@inproceedings{trafton1993,
	title        = {Studying examples and solving problems: Contributions to skill acquisition},
	author       = {Trafton, J Gregory and Reiser, Brian J},
	year         = 1993,
	booktitle    = { 15th conference of the Cognitive Science Society},
	publisher    = {Princeton University},
	address      = {Washington, DC},
	pages        = {1017--1022},
	organization = {Citeseer}
}
@article{rose2004,
	title        = {Radical Narcissistic numbers},
	author       = {Rose, Colin},
	year         = 2004,
	journal      = {Journal of Recreational Mathematics},
	publisher    = {Baywood Publishing Co., Inc.},
	volume       = 33,
	number       = 4,
	pages        = 250
}
@article{atkinson2000,
	title        = {Learning from Examples: Instructional Principles from the Worked Examples Research},
	author       = {Robert K. Atkinson and Sharon J. Derry and Alexander Renkl and Donald Wortham},
	year         = 2000,
	journal      = {Review of Educational Research},
	volume       = 70,
	number       = 2,
	pages        = {181--214},
	doi          = {10.3102/00346543070002181},
	url          = {https://doi.org/10.3102/00346543070002181},
	eprint       = {https://doi.org/10.3102/00346543070002181},
	abstract     = {Worked examples are instructional devices that provide an expert's problem solution for a learner to study. Worked-examples research is a cognitive-experimental program that has relevance to classroom instruction and the broader educational research community. A frame- work for organizing the findings of this research is proposed, leading to instructional design principles. For instance, one instructional design principle suggests that effective examples have highly integrated components. They employ multiple modalities in presentation and emphasize conceptual structure by labeling or segmenting. At the lesson level, effective instruction employs multiple examples for each conceptual problem type, varies example formats within problem type, and employs surface features to signal deep structure. Also, examples should be presented in close proximity to matched practice problems. More- over, learners can be encouraged through direct training or by the structure of the worked example to actively self:explain examples. Worked examples are associated with early stages of skill development, but the design principles are relevant to constructivist research and teaching.}
}
@article{Clark2006,
	title        = {Efficiency in learning: Evidence-based guidelines to manage cognitive load},
	author       = {Clark, Ruth Colvin and Nguyen, Frank and Sweller, John and Baddeley, Melissa},
	year         = 2006,
	journal      = {Performance Improvement},
	volume       = 45,
	number       = 9,
	pages        = {46--47},
	doi          = {https://doi.org/10.1002/pfi.4930450920},
	url          = {https://onlinelibrary.wiley.com/doi/abs/10.1002/pfi.4930450920},
	eprint       = {https://onlinelibrary.wiley.com/doi/pdf/10.1002/pfi.4930450920}
}
@incollection{jedlitschka2008reporting,
	title        = {Reporting experiments in software engineering},
	author       = {Jedlitschka, Andreas and Ciolkowski, Marcus and Pfahl, Dietmar},
	year         = 2008,
	booktitle    = {Guide to advanced empirical software engineering},
	publisher    = {Springer},
	address      = {London},
	pages        = {201--228},
	doi          = {10.1007/978-1-84800-044-5\_8},
	isbn         = {978-1-84800-044-5},
	url          = {https://doi.org/10.1007/978-1-84800-044-5\_8},
	abstract     = {Background: One major problem for integrating study results into a common body of knowledge is the heterogeneity of reporting styles: (1) It is difficult to locate relevant information and (2) important information is often missing.}
}
@article{van2002goal,
	title        = {Goal question metric (gqm) approach},
	author       = {Van Solingen, Rini and Basili, Vic and Caldiera, Gianluigi and Rombach, H Dieter},
	year         = 2002,
	journal      = {Encyclopedia of software engineering},
	publisher    = {Wiley Online Library}
}
@misc{Thonny,
	title        = {Thonny IDE},
	author       = {Annamaa, Aivar},
	year         = 2022,
	month        = jan,
	url          = {https://thonny.org}
}
@article{Bujang2016,
	title        = {Sample Size Guideline for Correlation Analysis},
	author       = {Bujang, Mohamad Adam and Baharum, Nurakmal},
	year         = 2016,
	month        = {03},
	journal      = {World Journal of Social Science Research},
	volume       = 3,
	pages        = 37,
	doi          = {10.22158/wjssr.v3n1p37}
}
@misc{Selectividad,
	title        = {Selectividad},
	author       = {Wikipedia},
	year         = 2022,
	month        = mar,
	url          = {https://en.wikipedia.org/wiki/Selectividad}
}
# programming books

ritchie1988 deitel-programC-8ed deitel-Java-ed4
@book{ritchie1988,
	title        = {The C Programming Language},
	author       = {Kernighan, Brian W. and Ritchie, Dennis M.},
	year         = 1988,
	publisher    = {Prentice Hall Professional Technical Reference},
	isbn         = {0131103709},
	edition      = {2nd}
}
@book{deitel-programC-8ed,
	title        = {How to Program C},
	author       = {Deitel, Paul and Deitel, Harvey},
	year         = 2016,
	publisher    = {Prentice Hall Press},
	address      = {USA},
	edition      = {8th}
}
@book{deitel-Java-ed4,
	title        = {Java 9 for programmers},
	author       = {Paul Deitel, Harvey Deitel},
	year         = 2017,
	publisher    = {New Jersey: Pearson Education},
	language     = {en},
	edition      = 4
}
@book{Barnes2016-gp,
	title        = {Objects first with java},
	author       = {Barnes, David J and Kolling, Michael},
	year         = 2016,
	month        = may,
	publisher    = {Pearson},
	address      = {Upper Saddle River, NJ},
	edition      = 6
}
@book{Schildt2022-eo,
	title        = {Java: A beginner's guide},
	author       = {Schildt, Herbert},
	year         = 2022,
	month        = apr,
	publisher    = {McGraw-Hill Education},
	address      = {Columbus, OH},
	edition      = 9
}
@book{Van_de_Woestyne-2ed,
	title        = {Softwareontwerp en programmeren met Python 3},
	author       = {Van de Woestyne, Ignace and Vanthienen, Jan},
	year         = 2020,
	publisher    = {Acco},
	language     = {nl},
	edition      = 2
}
@book{Lutz2013-wu,
	title        = {Learning Python},
	author       = {Lutz, Mark},
	year         = 2013,
	month        = jun,
	publisher    = {O'Reilly Media},
	address      = {Sebastopol, CA},
	edition      = 5,
	language     = {en}
}
@book{Aguilar2020-sc,
	title        = {Fundamentos de programaci{\'o}n: algoritmos, estructura de datos y objetos},
	author       = {Aguilar, Luis Joyanes},
	year         = 2020,
	publisher    = {Mc. Graw Hill},
	language     = {es},
	edition      = 4
}
@article{lott2010building,
	title        = {Building skills in python},
	author       = {Lott, Steven F},
	year         = 2010,
	journal      = {Creative Commons, USA},
	edition      = {}
}
@book{Downey2015-sv,
	title        = {Think Python},
	author       = {Downey, Allen B},
	year         = 2015,
	month        = dec,
	publisher    = {O'Reilly Media},
	address      = {Sebastopol, CA},
	edition      = 2
}
@book{Anderson2018-kn,
	title        = {Java Illuminated},
	author       = {Anderson, Julie and Franceschi, Herve J},
	year         = 2018,
	month        = jan,
	publisher    = {Jones and Bartlett},
	address      = {Sudbury, MA},
	edition      = 5,
	language     = {en}
}
@misc{enwiki:1124994812,
	title        = {Selectividad --- {Wikipedia}{,} The Free Encyclopedia},
	author       = {{Wikipedia contributors}},
	year         = 2022,
	url          = {https://en.wikipedia.org/w/index.php?title=Selectividad\&oldid=1124994812},
	note         = {[Online; accessed 30-December-2022]}
}
Scopus
EXPORT DATE: 15 March 2023
@article{Duran2022,
	title        = {Cognitive Load Theory in Computing Education Research: A Review},
	author       = {Duran, R. and Zavgorodniaia, A. and Sorva, J.},
	year         = 2022,
	journal      = {ACM Transactions on Computing Education},
	publisher    = {ACM},
	volume       = 22,
	number       = 4,
	doi          = {10.1145/3483843},
	issn         = 19466226,
	url          = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85137122957\&doi=10.1145\%2f3483843\&partnerID=40\&md5=b10fca2384b83998da278cf1203fd524},
	note         = {cited By 3},
	art_number   = 3483843,
	affiliation  = {Rodovia MS 473, s/n\textdegree{} Fazenda Santa B\'{a}rbara, Nova Andradina, CEP 79750-000, Brazil; Department of Computer Science, Konemiehentie 2, Espoo, Finland},
	abstract     = {One of the most commonly cited theories in computing education research is cognitive load theory (CLT), which explains how learning is affected by the bottleneck of human working memory and how teaching may work around that limitation. The theory has evolved over a number of decades, addressing shortcomings in earlier versions; other issues remain and are being debated by the CLT community. We conduct a systematic mapping review of how CLT has been used across a number of leading computing education research (CER) forums since 2010. We find that the most common reason to cite CLT is to mention it briefly as a design influence; authors predominantly cite old versions of the theory; hypotheses phrased in terms of cognitive load components are rare; and only a small selection of cognitive load measures have been applied, sparsely. Overall, the theory's evolution and recent themes in CLT appear to have had limited impact on CER so far. We recommend that studies in CER explain which version of the theory they use and why; clearly distinguish between load components (e.g., intrinsic and extraneous load); phrase hypotheses in terms of load components a priori; look further into validating different measures of cognitive load; accompany cognitive load measures with complementary constructs, such as motivation; and explore themes such as collaborative CLT and individual differences in working-memory capacity. \textcopyright{} 2022 Copyright held by the owner/author(s). Publication rights licensed to ACM.},
	author_keywords = {Cognitive load theory;  computing education;  literature review},
	keywords     = {Computer programming, Cognitive load theory;  Cognitive loads;  Computing education;  Design influences;  Education research;  Individual Differences;  Literature reviews;  Load components;  Systematic mapping;  Working memory, Computation theory},
	language     = {English},
	abbrev_source_title = {ACM J. Trans. Comput. Educ.},
	document_type = {Article},
	source       = {Scopus}
}
@article{Khomokhoana2022132,
	title        = {Mapping the Problem-Solving Strategies of Novice Programmers to Polya's Framework: SWOT Analysis as a Bottleneck Identification Tool},
	author       = {Khomokhoana, P.J. and Nel, L.},
	year         = 2022,
	journal      = {Communications in Computer and Information Science},
	publisher    = {Springer Science and Business Media Deutschland GmbH},
	volume       = {1461 CCIS},
	pages        = {132--148},
	doi          = {10.1007/978-3-030-95003-3\_9},
	isbn         = 9783030950026,
	issn         = 18650929,
	url          = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85124152557\&doi=10.1007\%2f978-3-030-95003-3\_9\&partnerID=40\&md5=6ca92aa4be01561bafa9c20c41b04a12},
	note         = {cited By 0; Conference of 50th Annual Conference of the Southern African Computer Lecturers' Association on ICT Education, SACLA 2021 ; Conference Date: 16 July 2021 Through 16 July 2021;  Conference Code:271179},
	affiliation  = {Department of Computer Science and Informatics, University of the Free State, Bloemfontein, South Africa},
	abstract     = {The development of problem-solving skills continues to be a challenge in various disciplines including Computer Science. In this study, we used the principles of the Decoding the Disciplines (DtDs) paradigm to better understand the mental processes that novice programmers follow when answering source code comprehension (SCC) related questions. This understanding can be fundamental in helping novices to overcome problem-solving related challenges. While focusing on step 1 of the DtDs paradigm, the aim of this study was threefold. Firstly, we explored the problem-solving strategies utilised by novice programmers while they were attempting to answer SCC related questions. Secondly, the identified problem-solving strategies were mapped onto Polya's four problem-solving steps. Finally, we utilised a SWOT analysis as a tool to identify problem-solving related learning bottlenecks. This study utilised an integrated methodological approach where data was collected by means of asking questions, observations, and artefact analysis. Thematic analysis of the collected data revealed a range of problem-solving strategies that these novice programmers utilised while performing various SCC tasks. These strategies were then mapped onto Polya's problem-solving steps. Based on a SWOT analysis of these strategies, we identified six problem-solving bottlenecks that point to difficulties that are not sufficiently addressed in introductory CS courses. \textcopyright{} 2022, Springer Nature Switzerland AG.},
	author_keywords = {Computer Science education;  Decoding the disciplines;  Novice programmers;  Polya's framework;  Problem-solving;  Source code comprehension;  SWOT analysis},
	keywords     = {Education computing, Bottleneck identifications;  Computer Science Education;  Decoding the discipline;  Identification tools;  Novice programmer;  Polya's framework;  Problem solving skills;  Problem-solving;  Source code comprehensions;  SWOT analysis, Decoding},
	correspondence_address1 = {Nel, L.; Department of Computer Science and Informatics, South Africa; email: nell\@ufs.ac.za},
	language     = {English},
	abbrev_source_title = {Commun. Comput. Info. Sci.},
	document_type = {Conference Paper},
	source       = {Scopus}
}
@conference{Fronza201965,
	title        = {An Exploration of Cognitive Shifting inWriting Code},
	author       = {Fronza, I. and Hellas, A. and Ihantola, P. and Mikkonen, T.},
	year         = 2019,
	journal      = {CompEd 2019 - ACM Conference on Global Computing Education},
	publisher    = {ACM},
	pages        = {65--71},
	doi          = {10.1145/3300115.3309522},
	isbn         = 9781450362597,
	url          = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85065994875\&doi=10.1145\%2f3300115.3309522\&partnerID=40\&md5=d327fdf9b55488a552b5eb4941f45386},
	note         = {cited By 1; Conference of 2019 ACM Global Computing Education Conference, CompEd 2019 ; Conference Date: 17 May 2019 Through 19 May 2019;  Conference Code:147900},
	affiliation  = {Free University of Bozen-Bolzano, Bolzano, Italy; University of Helsinki, Helsinki, Finland},
	abstract     = {Programming is considered a demanding task that requires focusing on detail at code level. Students learning to program need to learn to think like a programmer, which involves coming up with plans needed to solve problems, and they need to learn to write the code that corresponds to the plans that they have thought of. The use of multiple files creates additional overhead to the process, as part of the code is not visible to the student. If a student does not remember the contents of a particular file, she needs to consciously move from writing code in one file to reading code in another file. This conscious transition of attention from one location to another is known as cognitive shifting. Using key-level data collected from a programming exam, we analyze students' movements within files and between files, and relate these movements with students' performance in the course. Our results indicate that frequently moving from one file to another may lead to worse performance than more focused actions, but no such effect exists when analyzing movements within an individual file. \textcopyright{} 2019 Copyright held by the owner/author(s). Publication rights licensed to ACM.},
	author_keywords = {Cognitive shifting;  Educational data mining;  Learning analytics;  Movement in source code;  Programming process},
	keywords     = {Codes (symbols);  Computer programming;  Data mining, Cognitive shifting;  Educational data mining;  Learning analytics;  Programming process;  Source codes, Students},
	sponsors     = {ACM SIGCSE},
	language     = {English},
	abbrev_source_title = {CompEd - Proc. ACM Conf. Global Comput. Educ.},
	document_type = {Conference Paper},
	source       = {Scopus}
}
@article{Santos2018450,
	title        = {A systematic review on the code smell effect},
	author       = {Santos, J.A.M. and Rocha-Junior, J.B. and Prates, L.C.L. and Nascimento, R.S.D. and Freitas, M.F. and Mendon\c{c}a, M.G.D.},
	year         = 2018,
	journal      = {Journal of Systems and Software},
	publisher    = {Elsevier Inc.},
	volume       = 144,
	pages        = {450--477},
	doi          = {10.1016/j.jss.2018.07.035},
	issn         = {01641212},
	url          = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85050081131\&doi=10.1016\%2fj.jss.2018.07.035\&partnerID=40\&md5=b882822659f4a20d49e3fd2c3be4b4c5},
	note         = {cited By 34},
	affiliation  = {Technology Department, State University of Feira de Santana, Bahia, Brazil; Department of Exact Science, State University of Feira de Santana, Bahia, Brazil; Fraunhofer Project Center for Software \& Systems Engineering, Federal University of Bahia, Bahia, Brazil; Mathematic Institute, Federal University of Bahia, Bahia, Brazil},
	abstract     = {Context: Code smell is a term commonly used to describe potential problems in the design of software. The concept is well accepted by the software engineering community. However, some studies have presented divergent findings about the usefulness of the smell concept as a tool to support software development tasks. The reasons of these divergences have not been considered because the studies are presented independently. Objective: To synthesize current knowledge related to the usefulness of the smell concept. We focused on empirical studies investigating how smells impact the software development, the code smell effect. Method: A systematic review about the smell effect is carried out. We grouped the primary studies findings in a thematic map. Result: The smell concept does not support the evaluation of quality design in practice activities of software development. There is no strong evidence correlating smells and some important software development attributes, such as effort in maintenance. Moreover, the studies point out that human agreement on smell detection is low. Conclusion: In order to improve analysis on the subject, the area needs to better outline: (i) factors affecting human evaluation of smells; and (ii) a classification of types of smells, grouping them according to relevant characteristics. \textcopyright{} 2018 Elsevier Inc.},
	author_keywords = {Code smell;  Systematic review;  Thematic synthesis},
	keywords     = {Codes (symbols);  Maps;  Odors;  Quality control, Code smell;  Design of softwares;  Empirical studies;  Engineering community;  Human evaluation;  Potential problems;  Quality design;  Systematic Review, Software design},
	correspondence_address1 = {Santos, J.A.M.; Technology Department, Brazil; email: zeamancio\@uefs.br},
	coden        = {JSSOD},
	language     = {English},
	abbrev_source_title = {J Syst Software},
	document_type = {Article},
	source       = {Scopus}
}
@article{butler2007learning,
	title        = {Learning challenges faced by novice programming students studying high level and low feedback concepts},
	author       = {Butler, Matthew and Morgan, Michael and others},
	year         = 2007,
	journal      = {Proceedings ascilite Singapore},
	volume       = 1,
	number       = {99-107}
}
@inproceedings{10.1145/3502718.3534205,
	title        = {The Gap Between Industry and CS Education},
	author       = {Winters, Titus},
	year         = 2022,
	booktitle    = {27th ACM Conference on on Innovation and Technology in Computer Science Education Vol. 1},
	location     = {Dublin, Ireland},
	publisher    = {ACM},
	
	series       = {ITiCSE '22},
	pages        = {2–3},
	doi          = {10.1145/3502718.3534205},
	isbn         = 9781450392013,
	url          = {https://doi.org/10.1145/3502718.3534205},
	abstract     = {Industry practitioners and CS educators seem to operate in different worlds these days. My fellow industry leaders often have surprising ideas about what all can be covered in a 4 year degree program. We are seemingly unaware of the huge challenge in making novices into algorithmic thinkers and programmers, to say nothing of imparting mastery in the ever-expanding array of computing sub-disciplines. At the same time, the day-to-day operations in industry have a very different set of core skills and tools than what is traditionally presented in a CS curriculum. Communication skills, experimentation, reasoning, code comprehension, caching, threading, and concurrency models are a huge fraction of the toolkit for a software practitioner. Hashing is essential. Constants matter. Implementing data structures really doesn't. In practical terms, almost nobody should be using a linked list anymore. This talk will surface what I see as the disconnects on both sides, and suggestions for what we can do about it. (I will also probably be wrong, since I can only speak from my perspective and experience - but that's where important dialogues start.)},
	numpages     = 2,
	keywords     = {industry, education, engineering}
}
@article{Afzal2015-Exploratory,
	title        = {An Experiment on the Effectiveness and Efficiency of Exploratory Testing},
	author       = {Afzal, Wasif and Ghazi, Ahmad Nauman and Itkonen, Juha and Torkar, Richard and Andrews, Anneliese and Bhatti, Khurram},
	year         = 2015,
	month        = {jun},
	journal      = {Empirical Softw. Engg.},
	publisher    = {Kluwer Academic Publishers},
	address      = {USA},
	volume       = 20,
	number       = 3,
	pages        = {844–878},
	doi          = {10.1007/s10664-014-9301-4},
	issn         = {1382-3256},
	url          = {https://doi.org/10.1007/s10664-014-9301-4},
	issue_date   = {June 2015},
	abstract     = {The exploratory testing (ET) approach is commonly applied in industry, but lacks scientific research. The scientific community needs quantitative results on the performance of ET taken from realistic experimental settings. The objective of this paper is to quantify the effectiveness and efficiency of ET vs. testing with documented test cases (test case based testing, TCT). We performed four controlled experiments where a total of 24 practitioners and 46 students performed manual functional testing using ET and TCT. We measured the number of identified defects in the 90-minute testing sessions, the detection difficulty, severity and types of the detected defects, and the number of false defect reports. The results show that ET found a significantly greater number of defects. ET also found significantly more defects of varying levels of difficulty, types and severity levels. However, the two testing approaches did not differ significantly in terms of the number of false defect reports submitted. We conclude that ET was more efficient than TCT in our experiment. ET was also more effective than TCT when detection difficulty, type of defects and severity levels are considered. The two approaches are comparable when it comes to the number of false defect reports submitted.},
	numpages     = 35,
	keywords     = {Exploratory testing, Experiment, Efficiency, Effectiveness, Software testing}
}
@online{amyjko2022,
	title        = {Computing education research FAQ},
	author       = {Amy J. Ko},
	year         = 2022,
	month        = 9,
	url          = {https://faculty.washington.edu/ajko/cer}
}
@article{andreessen2011software,
	title        = {Why software is eating the world},
	author       = {Andreessen, Marc},
	year         = 2011,
	journal      = {Wall Street Journal},
	volume       = 20,
	number       = 2011,
	pages        = {C2}
}
@book{Assen2022,
	title        = {Stepping into Design-Based Education},
	author       = {Assen, Hanneke and Coelen, Robert and Geitz, Gerry},
	year         = 2022,
	month        = {02},
	pages        = {}
}
@inproceedings{astigarraga2010emerging,
	title        = {The emerging role of software testing in curricula},
	author       = {Astigarraga, Tara and Dow, Eli M and Lara, Christina and Prewitt, Richard and Ward, Maria R},
	year         = 2010,
	booktitle    = { Transforming Engineering Education: Creating Interdisciplinary Skills for Complex Global Environments},
	pages        = {1--26},
	organization = {IEEE}
}
@misc{BachSyllabus,
	title        = {A Tester's Syllabus},
	author       = {James Bach},
	year         = 2022,
	url          = {https://www.satisfice.com/resources}
}
@book{Bakker2018,
	title        = {Design Research in Education: A Practical Guide for Early Career Researchers},
	author       = {Bakker, Arthur},
	year         = 2018,
	month        = {08},
	pages        = {},
	doi          = {10.4324/9780203701010},
	isbn         = 9780203701010
}
@misc{Blakeslee2004,
	title        = {The CRAAP Test. LOEX Quarterly, 31 (3): 6--7},
	author       = {Blakeslee, S.},
	date         = 2004
}
@article{BOYLE201169,
	title        = {The role of psychology in understanding the impact of computer games},
	author       = {Elizabeth Boyle and Thomas M. Connolly and Thomas Hainey},
	year         = 2011,
	journal      = {Entertainment Computing},
	volume       = 2,
	number       = 2,
	pages        = {69--74},
	doi          = {https://doi.org/10.1016/j.entcom.2010.12.002},
	issn         = {1875-9521},
	url          = {https://www.sciencedirect.com/science/article/pii/S1875952110000200},
	note         = {Serious Games Development and Applications},
	keywords     = {Computer games, Psychology, Engagement, Serious games, Learning},
	abstract     = {Over the last 40 years, computer games have become an extremely popular leisure activity and more recently there has also been interest in the potential of serious games to help in learning, skill acquisition and attitude and behaviour change. Initially public interest in computer games focused on concerns about their violent and gender stereotyped content and their potentially addictive properties, but more recently the benefits of games have also been recognised. Psychology is at the interface between science, cognitive science and social science and in this paper we examine the role that theories and research in psychology have played in understanding the impacts of playing games, the appeal of games and the potential of games in supporting learning and behaviour change.}
}
@inbook{BSS2021,
	title        = {How Students Unit Test: Perceptions, Practices, and Pitfalls},
	author       = {Bai, Gina R. and Smith, Justin and Stolee, Kathryn T.},
	year         = 2021,
	booktitle    = { 26th ACM Conference on Innovation and Technology in Computer Science Education V. 1},
	publisher    = {ACM},
	
	pages        = {248–254},
	isbn         = 9781450382144,
	url          = {https://doi.org/10.1145/3430665.3456368},
	abstract     = {Unit testing is reported as one of the skills that graduating students lack, yet it is an essential skill for professional software developers. Understanding the challenges students face during testing can help inform practices for software testing education. To that end, we conduct an exploratory study to reveal students' perceptions of unit testing and challenges students encounter when practicing unit testing. We surveyed 54 students from two universities and gave them two testing tasks, one involving black-box test design and one involving white-box test implementation. For the tasks, we used two software projects from prior work in studying test-first development among software developers. We quantitatively analyzed the survey responses and test code properties, and qualitatively identified the mistakes and smells in the test code. We further report on our experience running this study with students.Our results regarding student perceptions show that students believe code coverage is the most important outcome for test suites. For testing practices, most students were ineffective in finding known defects. This may be due to the task design and/or challenges with understanding the source code. For testing pitfalls, we identified six test smells from student-written test code; the most common were ignoring setups in the test code and testing happy path only. These results suggest the students needed more introduction to these common testing concepts and practices in advance of the study activity. Through this experience, we have identified testing concepts that require emphasis for more effective future studies on testing behavior among students.},
	numpages     = 7
}
@inproceedings{Buffardi2014,
	title        = {A Formative Study of Influences on Student Testing Behaviors},
	author       = {Buffardi, Kevin and Edwards, Stephen H.},
	year         = 2014,
	booktitle    = { 45th ACM Technical Symposium on Computer Science Education},
	location     = {Atlanta, Georgia, USA},
	
	series       = {SIGCSE '14},
	pages        = {597–602},
	isbn         = 9781450326056,
	abstract     = {While Computer Science curricula teach students strategic software development processes, assessment is often product-instead of process-oriented. Test-Driven Development (TDD) has gained popularity in computing education, but evaluating students' adherence to TDD requires analyzing their development processes instead of only their final product. Consequently, we designed an adaptive feedback system for reinforcing incremental testing behaviors. In this paper, we compare the results of the system with different reinforcement schedules and with- or without- visually salient testing goals. We analyzed snapshots of students' programming projects gathered during development and interviewed students at the end of the academic term. From our findings, we identify potential for influencing student development behaviors and suggest future direction for designing adaptive reinforcement.},
	keywords     = {web-cat, test-driven development, adaptive feedback, unit testing, test-first, software development process, instructional technology, automated testing},
	numpages     = 6
}
@book{charmaz2014constructing,
	title        = {Constructing Grounded Theory},
	author       = {Charmaz, K.},
	year         = 2014,
	publisher    = {SAGE Publications},
	series       = {Introducing Qualitative Methods series},
	isbn         = 9781446297223,
	url          = {https://books.google.ie/books?id=v\_GGAwAAQBAJ}
}
@book{clark1922gantt,
	title        = {The Gantt chart: A working tool of management},
	author       = {Clark, Wallace},
	year         = 1922,
	publisher    = {Ronald Press Company}
}
@online{Compass2021,
	title        = {TestCompass, the early based and easy to use Model Based Testing tool in the cloud},
	author       = {Silvio Cacace},
	url          = {https://www.compass-testservices.com/},
	date         = {2021-08-17},
	abstract     = {TestCompass is an early Model Based Testing tool, developed by test experts with many years of practical experience in the field of Software Testing.}
}
@book{Cook2002,
	title        = {Experimental and quasi-experimental designs for generalized causal inference},
	author       = {Cook, Thomas D. and Campbell, Donald Thomas and Shadish, William},
	year         = 2002,
	publisher    = {Houghton Mifflin Boston, MA},
	address      = {Boston}
}
@inproceedings{CSERC2021-TILE,
	title        = {Test Informed Learning with Examples},
	author       = {Vos, Tanja E. J. and Doorn, Niels and Mar\`{\i}n, Beatriz},
	year         = 2021,
	booktitle    = {10th Computer Science Education Research Conference},
	location     = {Virtual Event, Netherlands},
	publisher    = {ACM},
	
	series       = {CSERC '21},
	pages        = {1–2},
	doi          = {10.1145/3507923.3507924},
	isbn         = 9781450385763,
	url          = {https://doi.org/10.1145/3507923.3507924},
	abstract     = {Research has demonstrated that integrating software testing in programming courses has benefits and drawbacks. This work presents Test Informed Learning with Examples (TILE), a proposal to improve teaching of testing in introductory programming courses. We will argue why we think TILE can solve most of the known drawbacks.},
	numpages     = 2
}
@article{DBLP:journals/corr/abs-2103-14235,
	title        = {Socio-Technical Grounded Theory for Software Engineering},
	author       = {Rashina Hoda},
	year         = 2021,
	journal      = {CoRR},
	volume       = {abs/2103.14235},
	url          = {https://arxiv.org/abs/2103.14235},
	eprinttype   = {arXiv},
	eprint       = {2103.14235},
	timestamp    = {Wed, 07 Apr 2021 15:31:46 +0200},
	biburl       = {https://dblp.org/rec/journals/corr/abs-2103-14235.bib},
	bibsource    = {dblp computer science bibliography, https://dblp.org}
}
@mastersthesis{doorn_how_2018,
	title        = {How can more students become `test-infected': current state of affairs and possible improvements},
	author       = {Doorn, N.},
	year         = 2018,
	school       = {Open Universiteit}
}
@article{dweck2019,
	title        = {Mindsets: A View From Two Eras},
	author       = {Carol S. Dweck and David S. Yeager},
	year         = 2019,
	journal      = {Perspectives on Psychological Science},
	volume       = 14,
	number       = 3,
	pages        = {481--496},
	doi          = {10.1177/1745691618804166},
	url          = {https://doi.org/10.1177/1745691618804166},
	note         = {PMID: 30707853},
	eprint       = {https://doi.org/10.1177/1745691618804166},
	abstract     = {A growth mindset is the belief that human capacities are not fixed but can be developed over time, and mindset research examines the power of such beliefs to influence human behavior. This article offers two personal perspectives on mindset research across two eras. Given recent changes in the field, the authors represent different generations of researchers, each focusing on different issues and challenges, but both committed to ``era-bridging'' research. The first author traces mindset research from its systematic examination of how mindsets affect challenge seeking and resilience, through the ways in which mindsets influence the formation of judgments and stereotypes. The second author then describes how mindset research entered the era of field experiments and replication science, and how researchers worked to create reliable interventions to address underachievement--including a national experiment in the United States. The authors conclude that there is much more to learn but that the studies to date illustrate how an era-bridging program of research can continue to be generative and relevant to new generations of scholars.}
}
@inproceedings{Enoiu2020,
	title        = {Towards a Model of Testers' Cognitive Processes: Software Testing as a Problem Solving Approach},
	author       = {Enoiu, Eduard and Tukseferi, Gerald and Feldt, Robert},
	year         = 2020,
	booktitle    = { 20th International Conference on Software Quality, Reliability and Security Companion (QRS-C)},
publisher    = {IEEE},
	volume       = {},
	number       = {},
	pages        = {272--279},
	doi          = {10.1109/QRS-C51114.2020.00053}
}
@inbook{Eric2017,
	title        = {Protocol Analysis},
	author       = {Ericsson, Karl},
	year         = 2017,
	month        = {08},
	journal      = {A Companion to Cognitive Science},
	pages        = {425--432},
	isbn         = 9780631218517
}
@article{forbus1995mac,
	title        = {MAC/FAC: A model of similarity-based retrieval},
	author       = {Forbus, Kenneth D and Gentner, Dedre and Law, Keith},
	year         = 1995,
	journal      = {Cognitive science},
	publisher    = {Wiley Online Library},
	volume       = 19,
	number       = 2,
	pages        = {141--205}
}
@misc{fowler_2001,
	title        = {Junit test infected: Programmers love writing tests},
	author       = {Fowler, Martin},
	year         = 2001,
	month        = 2,
	journal      = {Test Infected: Programmers Love Writing Tests},
	publisher    = {Sourceforge},
	url          = {http://junit.sourceforge.net/doc/testinfected/testing.htm}
}
@inproceedings{Frajtak2016,
	title        = {Model-Based Testing and Exploratory Testing: Is Synergy Possible?},
	author       = {K. Frajtak and M. Bures and I. Jelinek},
	year         = 2016,

	booktitle    = {6th International Conference on IT Convergence and Security (ICITCS)},
publisher    = {IEEE},
	
	pages        = {1--6}
}
@inproceedings{Galster2016,
	title        = {What Makes Teaching Software Architecture Difficult?},
	author       = {Galster, Matthias and Angelov, Samuil},
	year         = 2016,
	booktitle    = {38th International Conference on Software Engineering Companion},
	location     = {Austin, Texas},
	
	series       = {ICSE '16},
	pages        = {356–359},
	isbn         = 9781450342056,
	abstract     = {The software architecture is usually the first design artifact that addresses quality issues (e.g., performance, security). Also , the architecture is reference point for other development activities, e.g., coding and maintenance. Based on our experience teaching software engineering and architecture at different institutions and levels, we discuss what makes teaching software architecture difficult, and how teaching architecture differs from teaching other software engineering topics. Our discussions can help educators design and improve software architecture curricula, and support education researchers in investigating pedagogical approaches and tools for better software architecture training.},
	keywords     = {students, software architecture, learners, training, education},
	numpages     = 4
}
@article{GAROUSI201935,
	title        = {A survey on software testability},
	author       = {Vahid Garousi and Michael Felderer and Feyza Nur K\i{}l\i{}\c{c}aslan},
	year         = 2019,
	journal      = {Information and Software Technology},
	volume       = 108,
	pages        = {35--64},
	doi          = {https://doi.org/10.1016/j.infsof.2018.12.003},
	issn         = {0950-5849},
	url          = {https://www.sciencedirect.com/science/article/pii/S0950584918302490},
	keywords     = {Software testing, Software testability, Survey, Systematic literature mapping, Systematic literature review, Systematic mapping},
	abstract     = {Context Software testability is the degree to which a software system or a unit under test supports its own testing. To predict and improve software testability, a large number of techniques and metrics have been proposed by both practitioners and researchers in the last several decades. Reviewing and getting an overview of the entire state-of-the-art and state-of-the-practice in this area is often challenging for a practitioner or a new researcher. Objective Our objective is to summarize the body of knowledge in this area and to benefit the readers (both practitioners and researchers) in preparing, measuring and improving software testability. Method To address the above need, the authors conducted a survey in the form of a systematic literature mapping (classification) to find out what we as a community know about this topic. After compiling an initial pool of 303 papers, and applying a set of inclusion/exclusion criteria , our final pool included 208 papers (published between 1982 and 2017). Results The area of software testability has been comprehensively studied by researchers and practitioners. Approaches for measurement of testability and improvement of testability are the most-frequently addressed in the papers. The two most often mentioned factors affecting testability are observability and controllability. Common ways to improve testability are testability transformation, improving observability, adding assertions, and improving controllability. Conclusion This paper serves for both researchers and practitioners as an ``index'' to the vast body of knowledge in the area of testability. The results could help practitioners measure and improve software testability in their projects. To assess potential benefits of this review paper, we shared its draft version with two of our industrial collaborators. They stated that they found the review useful and beneficial in their testing activities. Our results can also benefit researchers in observing the trends in this area and identify the topics that require further investigation.}
}
@book{greenblat1981principles,
	title        = {Principles and practices of gaming-simulation},
	author       = {Greenblat, Cathy S and Duke, Richard D},
	year         = 1981,
	publisher    = {SAGE Publications, Incorporated}
}
@book{hermans2021programmer,
	title        = {The Programmer's Brain: What every programmer needs to know about cognition},
	author       = {Hermans, Felienne},
	year         = 2021,
	month        = dec,
	publisher    = {Manning Publications},
	address      = {New York, NY}
}
@misc{https://doi.org/10.48550/arxiv.2201.05216,
	title        = {The Fairness Field Guide: Perspectives from Social and Formal Sciences},
	author       = {Carey, Alycia N. and Wu, Xintao},
	year         = 2022,
	publisher    = {arXiv},
	doi          = {10.48550/ARXIV.2201.05216},
	url          = {https://arxiv.org/abs/2201.05216},
	copyright    = {Creative Commons Attribution 4.0 International},
	keywords     = {Artificial Intelligence (cs.AI), Computers and Society (cs.CY), Machine Learning (cs.LG), FOS: Computer and information sciences, FOS: Computer and information sciences, A.1, I.2.0, J.4}
}
@article{Huynh2020-ContextDriven,
	title        = {An Effective Approach for Context Driven Testing in Practice -- A Case Study},
	author       = {Huynh, Quyet-Thang and Pham, Le-Trinh and Ha, Nhu-Hang and Nguyen, Duc-Man},
	year         = 2020,
	journal      = {International Journal of Software Engineering and Knowledge Engineering},
	volume       = 30,
	number       = {09},
	pages        = {1245--1262},
	doi          = {10.1142/S0218194020500333}
}
@inproceedings{isbister2010designing,
	title        = {Designing games for learning: insights from conversations with designers},
	author       = {Isbister, Katherine and Flanagan, Mary and Hash, Chelsea},
	year         = 2010,
	booktitle    = {Proceedings of the sigchi conference on human factors in computing systems},
	pages        = {2041--2044}
}
@article{Itkonen2014,
	title        = {Are Test Cases Needed? Replicated Comparison between Exploratory and Test-Case-Based Software Testing},
	author       = {Itkonen, Juha and M\"{a}ntyl\"{a}, Mika V.},
	year         = 2014,
	month        = {apr},
	journal      = {Empirical Softw. Engg.},
	publisher    = {Kluwer Academic Publishers},
	address      = {USA},
	volume       = 19,
	number       = 2,
	pages        = {303–342},
	doi          = {10.1007/s10664-013-9266-8},
	issn         = {1382-3256},
	url          = {https://doi.org/10.1007/s10664-013-9266-8},
	issue_date   = {April 2014},
	abstract     = {Manual software testing is a widely practiced verification and validation method that is unlikely to fade away despite the advances in test automation. In the domain of manual testing, many practitioners advocate exploratory testing (ET), i.e., creative, experience-based testing without predesigned test cases , and they claim that it is more efficient than testing with detailed test cases. This paper reports a replicated experiment comparing effectiveness, efficiency, and perceived differences between ET and test-case-based testing (TCT) using 51 students as subjects, who performed manual functional testing on the jEdit text editor. Our results confirm the findings of the original study: 1) there is no difference in the defect detection effectiveness between ET and TCT, 2) ET is more efficient by requiring less design effort, and 3) TCT produces more false-positive defect reports than ET. Based on the small differences in the experimental design, we also put forward a hypothesis that the effectiveness of the TCT approach would suffer more than ET from time pressure. We also found that both approaches had distinctive issues: in TCT, the problems were related to correct abstraction levels of test cases, and the problems in ET were related to test design and logging of the test execution and results. Finally, we recognize that TCT has other benefits over ET in managing and controlling testing in large organizations.},
	numpages     = 40,
	keywords     = {Exploratory testing, Experiment, Test cases, Effectiveness, Manual testing, Software testing, Efficiency}
}
@article{Itkonen2016,
	title        = {Test Better by Exploring: Harnessing Human Skills and Knowledge},
	author       = {J. Itkonen and M. V. Mantyla and C. Lassenius},
	year         = 2016,
	
	journal      = {IEEE Software},
	publisher    = {IEEE},
	
	volume       = 33,
	number       = {04},
	pages        = {90--96},
	issn         = {1937-4194},
	keywords     = {software testing;computer bugs;human factors;automation;documentation;validation;software engineering;design methodology}
}
@misc{Jmeter,
	title        = {JMeter},
	author       = {Apache},
	year         = 2022,
	url          = {https://jmeter.apache.org}
}
@article{jones2001integrating,
	title        = {Integrating testing into the curriculum--arsenic in small doses},
	author       = {Jones, Edward L},
	year         = 2001,
	journal      = {ACM SIGCSE Bulletin},
	publisher    = {ACM },
	volume       = 33,
	number       = 1,
	pages        = {337--341}
}
@misc{junit,
	title        = {JUnit framework 5},
	author       = {The JUnit Team},
	year         = 2022,
	url          = {https://junit.org/junit5/}
}
@inproceedings{kaner2006exploratory,
	title        = {Exploratory testing},
	author       = {Kaner, Cem},
	year         = 2006,
	booktitle    = {Quality assurance institute worldwide annual software testing conference},
	pages        = {1--14}
}
@book{kaner2011lessons,
	title        = {Lessons Learned in Software Testing: A Context-Driven Approach},
	author       = {Kaner, C. and Bach, J. and Pettichord, B.},
	year         = 2011,
	publisher    = {Wiley},
	isbn         = 9781118080559,
	url          = {https://books.google.nl/books?id=byZmT73R1a8C}
}
@article{klein2006making,
	title        = {Making sense of sensemaking 1: Alternative perspectives},
	author       = {Klein, Gary and Moon, Brian and Hoffman, Robert R},
	year         = 2006,
	journal      = {IEEE Intelligent systems},
	publisher    = {IEEE},
	volume       = 21,
	number       = 4,
	pages        = {70--73}
}
@article{klein2006making2,
	title        = {Making sense of sensemaking 2: A macrocognitive model},
	author       = {Klein, Gary and Moon, Brian and Hoffman, Robert R},
	year         = 2006,
	journal      = {IEEE Intelligent systems},
	publisher    = {IEEE},
	volume       = 21,
	number       = 5,
	pages        = {88--92}
}
@inproceedings{Kolikant2005,
	title        = {Students' alternative standards for correctness},
	author       = {Kolikant, Yifat Ben-David},
	year         = 2005,
	booktitle    = {1st international workshop on {Computing} education research},
	publisher    = {ACM},
	pages        = {37--43}
}
@article{krasner2021cost,
	title        = {The cost of poor software quality in the US: a 2020 report},
	author       = {Krasner, Herb},
	year         = 2021,
	journal      = {Proc. Consortium Inf. Softw. QualityTM (CISQTM)}
}
@inbook{Lane2012,
	title        = {Cognitive Models of Learning},
	author       = {Lane, H. Chad},
	year         = 2012,
	booktitle    = {Encyclopedia of the Sciences of Learning},
	publisher    = {Springer US},
	address      = {Boston, MA},
	pages        = {608--610},
	isbn         = {978-1-4419-1428-6}
}
@inproceedings{Leite2020,
	title        = {An Experience Report About Challenges of Software Engineering as a Second Cycle Course},
	author       = {Leite, Felipe Torres and Coutinho, Jarbele C. S. and de Sousa, Reudismam Rolim},
	year         = 2020,
	booktitle    = {34th Brazilian Symposium on Software Engineering},
	location     = {Natal, Brazil},
	publisher    = {ACM},
	
	series       = {SBES '20},
	pages        = {824–833},
	doi          = {10.1145/3422392.3422487},
	isbn         = 9781450387538,
	url          = {https://doi.org/10.1145/3422392.3422487},
	abstract     = {The dynamism of the software development market has demanded increasingly qualified professionals with practical knowledge on the implementation of paradigms and methodologies in the development of projects. In this context, there are undergraduate courses in Software Engineering (SE) offered in the format of two cycles, to try to deliver to the market professionals who meet the demands of the sector. Therefore, it is important to know the challenges that arise in the teaching scenario and the emerging topics of SE, in order to provide students with an academic-professional training closer to the real scenario of the software industry. Thus, this article aims to identify the difficulties observed in an undergraduate course in SE and its emerging topics, in the form of two cycles. For this, a survey with professors from a two-cycle SE course was carried out. Through a quantitative and qualitative analysis of the results, it was possible to identify some main challenges faced by professors. This type of analysis has proved to be useful to identify opportunities for improvement in the academic-professional training of SE students and to provide the software industry with more qualified professionals.},
	numpages     = 10,
	keywords     = {Survey, Education, Software Engineering}
}
@incollection{lizama2020unpopularity,
	title        = {The unpopularity of the software tester role among software practitioners: a case study},
	author       = {Lizama, Yadira and Varona, Daniel and Waychal, Pradeep and Capretz , Luiz Fernando},
	year         = 2020,
	booktitle    = {Advances in RAMS Engineering},
	publisher    = {Springer},
	pages        = {185--197}
}
@article{luo2001software,
	title        = {Software testing techniques},
	author       = {Luo, Lu},
	year         = 2001,
	journal      = {Institute for software research international Carnegie mellon university Pittsburgh, PA},
	volume       = 15232,
	number       = {1-19},
	pages        = 19
}
@inproceedings{Maar2019,
	title        = {Excellence in Exploratory Testing: Success Factors in Large-Scale Industry Projects},
	author       = {M{\aa}rtensson, Torvald and Martini, Antonio and St{\aa}hl, Daniel and Bosch, Jan},
	year         = 2019,
	booktitle    = {Product-Focused Software Process Improvement},
	publisher    = {Springer International Publishing},
	address      = {Cham},
	pages        = {299--314},
	isbn         = {978-3-030-35333-9},
	editor       = {Franch, Xavier and M{\"a}nnist{\"o}, Tomi and Mart{\'i}nez-Fern{\' a}ndez, Silverio},
	abstract     = {Based on interviews with 20 interviewees from four case study companies, this paper presents a list of key factors that enable efficient and effective exploratory testing of large-scale software systems. The nine factors are grouped into four themes: ``The testers' knowledge, experience and personality'', ``Purpose and scope'', ``Ways of working'' and ``Recording and reporting''. According to the interviewees, exploratory testing is a more creative way to work for the testers, and was therefore considered to make better use of the testers. Exploratory testing was also described as a good way to test system-wide and to test large-scale systems, especially exploratory testing with an end-user perspective. The identified key factors were confirmed by a series of follow-up interviews with the 20 interviewees and a cross-company workshop with 14 participants. This strengthens the generalizability of the findings, supporting that the list of key factors can be applied to projects in a large segment of the software industry. This paper also presents the results from a systematic literature review including 129 publications related to exploratory testing. No publication were found that summarizes the key factors that enable efficient and effective exploratory testing, which supports the novelty of the findings.}
}
@article{Marin2013,
	title        = {Using a Functional Size Measurement Procedure to Evaluate the Quality of Models in MDD Environments},
	author       = {Mar\'{i}n, Beatriz and Giachetti, Giovanni and Pastor, Oscar and Vos, Tanja E. J. and Abran, Alain},
	
	publisher    = {ACM},
	volume       = 22,
	number       = 3,
	issn         = {1049-331X},
	date         = {2013-07},
	journaltitle = {ACM Trans. Softw. Eng. Methodol.},
	abstract     = {Models are key artifacts in Model-Driven Development (MDD) methods. To produce high-quality software by using MDD methods, quality assurance of models is of paramount importance. To evaluate the quality of models, defect detection is considered a suitable approach and is usually applied using reading techniques. However, these reading techniques have limitations and constraints, and new techniques are required to improve the efficiency at finding as many defects as possible. This article presents a case study that has been carried out to evaluate the use of a Functional Size Measurement (FSM) procedure in the detection of defects in models of an MDD environment. To do this, we compare the defects and the defect types found by an inspection group with the defects and the defect types found by the FSM procedure. The results indicate that the FSM is useful since it finds all the defects related to a specific defect type, it finds different defect types than an inspection group, and it finds defects related to the correctness and the consistency of the models.},
	articleno    = 26,
	issue_date   = {July 2013},
	keywords     = {model-driven development, functional size, defect detection, Case study},
	numpages     = 31
}
@article{marin2017testing,
	title        = {Testing of model-driven development applications},
	author       = {Mar{\'\i}n, Beatriz and Gallardo, Carlos and Quiroga, Diego and Giachetti, Giovanni and Serral, Estefan{\'\i}a},
	year         = 2017,
	journal      = {Software Quality Journal},
	publisher    = {Springer},
	volume       = 25,
	number       = 2,
	pages        = {407--435}
}
@inproceedings{marin2022enactest,
	title        = {ENACTEST-European Innovation Alliance for Testing Education.},
	author       = {Mar{\'\i}n, Beatriz and Vos, Tanja E. J. and Paiva, Ana CR and Fasolino, Anna Rita and Snoeck, Monique},
	year         = 2022,
	booktitle    = {RCIS Workshops}
}
@misc{Martins2021,
	title        = {From Blackboard to the Office: A Look Into How Practitioners Perceive Software Testing Education},
	author       = {Luana Martins and Vinicius Brito and Daniela Feitosa and Larissa Rocha and Heitor Costa and Ivan Machado},
	year         = 2021,
	eprint       = {2106.06422},
	archiveprefix = {arXiv},
	primaryclass = {cs.SE}
}
@article{mayeda2021evaluating,
	title        = {Evaluating software testing techniques: A systematic mapping study},
	author       = {Mayeda, Mitchell and Andrews, Anneliese},
	year         = 2021,
	journal      = {Advances in Computers},
	publisher    = {Elsevier},
	volume       = 123,
	pages        = {41--114}
}
@article{mayo2009video,
	title        = {Video games: A route to large-scale STEM education?},
	author       = {Mayo, Merrilea J},
	year         = 2009,
	journal      = {Science},
	publisher    = {American Association for the Advancement of Science},
	volume       = 323,
	number       = 5910,
	pages        = {79--82}
}
@book{McKenney2012,
	title        = {Conducting educational design research},
	author       = {Susan McKenney and Reeves, {Thomas C.}},
	year         = 2018,
	month        = sep,
	day          = 3,
	publisher    = {Routledge},
	address      = {United Kingdom},
	doi          = {10.4324/9781315105642},
	abstract     = {Educational design research blends scientific investigation with systematic development and implementation of solutions to educational problems. Empirical investigation is conducted in real learning settings-not laboratories-to craft usable and effective solutions. At the same time, the research is carefully structured to produce theoretical understanding that can serve the work of others. To support graduate students as well as experienced researchers who are new to this approach, Conducting Educational Design Research integrates multiple perspectives of educational design research throughout this three-part book. Part one clarifies the educational design research origins, approach and outcomes. It also presents a generic model portraying the overall process. Part two discusses the constituent elements of the model in detail, these are: analysis and exploration; design and construction; evaluation and reflection; and implementation and spread. Part three offers recommendations for proposing, reporting and advancing educational design research. Through related readings and richly varied examples, Conducting Educational Design Research offers clear and well-documented guidance on how to conceptualize and conduct this stimulating form of inquiry. For decades, policies for educational research worldwide have swung back and forth between demanding rigor above all other concerns, and increasing emphasis on impact. These two qualities need not be mutually exclusive. This volume supports readers in grasping and realizing the potential of educational design research. It demonstrates how rigorous and relevant investigation can yield both theoretical understanding and solutions to urgent educational problems.},
	language     = {English},
	edition      = {2nd}
}
@article{McKinley_2015,
	title        = {Critical Argument and Writer Identity: Social Constructivism as a Theoretical Framework for EFL Academic Writing},
	author       = {Jim McKinley},
	year         = 2015,
	journal      = {Critical Inquiry in Language Studies},
	publisher    = {Routledge},
	volume       = 12,
	number       = 3,
	pages        = {184--207},
	doi          = {10.1080/15427587.2015.1060558},
	url          = {https://doi.org/10.1080/15427587.2015.1060558},
	eprint       = {https://doi.org/10.1080/15427587.2015.1060558}
}
@book{mestre2006transfer,
	title        = {Transfer of Learning from a Modern Multidisciplinary Perspective},
	author       = {Mestre, J.P.},
	year         = 2006,
	publisher    = {Information Age Publishing, Incorporated},
	address      = {Charlotte, NC},
	series       = {Current Perspectives on Cognition, Learning and Instruction},
	isbn         = 9781607526735,
	url          = {https://books.google.nl/books?id=x\_knDwAAQBAJ}
}
@article{miller1981introduction,
	title        = {Introduction to software testing technology},
	author       = {Miller, EF},
	year         = 1981,
	journal      = {Tutorial: Software Testing \& Validation Techniques, Second Edition, IEEE Catalog No. EHO},
	pages        = {180--0}
}
@book{minto2009pyramid,
	title        = {The pyramid principle: logic in writing and thinking},
	author       = {Minto, Barbara},
	year         = 2009,
	publisher    = {Pearson Education}
}
@article{NO2017,
	title        = {Test Oracle Strategies for Model-Based Testing},
	author       = {Li, Nan and Offutt, Jeff},
	year         = 2017,
	journal      = {IEEE Transactions on Software Engineering},
	volume       = 43,
	number       = 4,
	pages        = {372--395},
	doi          = {10.1109/TSE.2016.2597136}
}
@misc{nutri2021,
	title        = {The Netherlands Nutrition Centre},
	journal      = {Voedingscentrum},
	url          = {https://www.voedingscentrum.nl/nl/service/english.aspx}
}
@article{odden2019defining,
	title        = {Defining sensemaking: Bringing clarity to a fragmented theoretical construct},
	author       = {Odden, Tor Ole B and Russ, Rosemary S},
	year         = 2019,
	journal      = {Science Education},
	publisher    = {Wiley Online Library},
	volume       = 103,
	number       = 1,
	pages        = {187--205}
}
@article{oost2003circling,
	title        = {Circling around a question: Defining your research problem},
	author       = {Oost, Heinze},
	year         = 2003,
	journal      = {IVLOS, Utrecht}
}
@article{Pearl+2010,
	title        = {An Introduction to Causal Inference},
	author       = {Judea Pearl},
	year         = 2010,
	journal      = {The International Journal of Biostatistics},
	volume       = 6,
	number       = 2,
	doi          = {doi:10.2202/1557-4679.1203},
	url          = {https://doi.org/10.2202/1557-4679.1203},
	lastchecked  = {2022-08-09}
}
@book{pearl2019book,
	title        = {The Book of why: The New Science of Cause and Effect},
	author       = {Pearl, J. and Mackenzie, D.},
	year         = 2019,
	publisher    = {Penguin Books},
	series       = {An Allen Lane book},
	isbn         = 9780141982410,
	url          = {https://books.google.nl/books?id=OgKMtgEACAAJ}
}
@inproceedings{Pfahl2014,
	title        = {How is Exploratory Testing Used? A State-of-the-Practice Survey},
	author       = {Pfahl, Dietmar and Yin, Huishi and M\"{a}ntyl\"{a}, Mika V. and M \"{u}nch, J\"{u}rgen},
	year         = 2014,
	booktitle    = { 8th ACM/IEEE International Symposium on Empirical Software Engineering and Measurement},
	location     = {Torino, Italy},
	publisher    = {ACM},
	
	series       = {ESEM '14},
	doi          = {10.1145/2652524.2652531},
	isbn         = 9781450327749,
	url          = {https://doi.org/10.1145/2652524.2652531},
	abstract     = {Context: Exploratory Testing has experienced a rise in popularity in the industry with the emergence of agile development practices, yet it remains unclear, in which domains and how it is used in practice.Goal: To study how software engineers understand and apply the principles of exploratory testing, as well as the specific advantages and difficulties they experience.Method: We conducted an online survey in the period June to August 2013 among Estonian and Finnish software developers and testers.Results: Our main findings are that the majority of testers, developers, and test managers using ET, (1) apply ET to usability-critical, performance-critical, security-critical and safety-critical software to a high degree; (2) use ET very flexibly in all types of test levels, activities, and phases; (3) perceive ET as an approach that supports creativity during testing and that is effective and efficient; and (4) find that ET is not easy to use and has little tool support.Conclusions: The high degree of application of ET in critical domains is particularly interesting and indicates a need for future research to obtain a better understanding of the effects of ET in these domains. In addition, our findings suggest that more support to ET users should be given (guidance and tools).},
	articleno    = 5,
	numpages     = 10,
	keywords     = {exploratory testing, survey, software}
}
@article{Pool2016,
	title        = {Design-based research: is this a suitable methodology for short-term projects?},
	author       = {Jessica Pool and Dorothy Laubscher},
	year         = 2016,
	journal      = {Educational Media International},
	publisher    = {Routledge},
	volume       = 53,
	number       = 1,
	pages        = {42--52},
	doi          = {10.1080/09523987.2016.1189246},
	url          = {https://doi.org/10.1080/09523987.2016.1189246},
	eprint       = {https://doi.org/10.1080/09523987.2016.1189246}
}
@book{quetelet1869physique,
	title        = {Physique sociale, ou essai sur le d{\'e}veloppement des facult{\'e} s de l'homme},
	author       = {Quetelet, Adolphe},
	year         = 1869,
	publisher    = {Muquardt},
	volume       = 2
}
@article{Ralph2015,
	title        = {The Sensemaking-Coevolution-Implementation Theory of software design},
	author       = {Paul Ralph},
	year         = 2015,
	journal      = {Science of Computer Programming},
	volume       = 101,
	pages        = {21--41},
	issn         = {0167-6423},
	note         = {Towards general theories of software engineering},
	abstract     = {Following calls for greater theory development in software engineering, this paper formulates a process theory of software development practice. Sensemaking-Coevolution-Implementation Theory explains how complex software systems are created by cohesive software development teams in organizations. It posits that an independent agent (the development team) creates a software system by alternating between three categories of activities: making sense of an ambiguous context, mutually refining schemas of the context and design space, and manifesting their understanding of the design space in a technological artifact. This theory development paper defines, illustrates and conceptually evaluates Sensemaking-Coevolution-Implementation Theory. It grounds the theory's concepts and relationships in existing software engineering, information systems development and interdisciplinary design literature.},
	keywords     = {Design, General theory, Process theory, Theory development, Coevolution}
}
@article{RALPH201868,
	title        = {The two paradigms of software development research},
	author       = {Paul Ralph},
	year         = 2018,
	journal      = {Science of Computer Programming},
	volume       = 156,
	pages        = {68--89},
	doi          = {https://doi.org/10.1016/j.scico.2018.01.002},
	issn         = {0167-6423},
	url          = {https://www.sciencedirect.com/science/article/pii/S0167642318300030},
	keywords     = {Empiricism, Rationalism, Philosophy of science, Software design, Empirical software engineering},
	abstract     = {The most profound conflict in software engineering is not between positivist and interpretivist research approaches or Agile and Heavyweight software development methods, but between the Rational and Empirical Design Paradigms. The Rational and Empirical Paradigms are disparate constellations of beliefs about how software is and should be created. The Rational Paradigm remains dominant in software engineering research, standards and curricula despite being contradicted by decades of empirical research. The Rational Paradigm views analysis, design and programming as separate activities despite empirical research showing that they are simultaneous and inextricably interconnected. The Rational Paradigm views developers as executing plans despite empirical research showing that plans are a weak resource for informing situated action. The Rational Paradigm views success in terms of the Project Triangle (scope, time, cost and quality) despite empirical researching showing that the Project Triangle omits critical dimensions of success. The Rational Paradigm assumes that analysts elicit requirements despite empirical research showing that analysts and stakeholders co-construct preferences. The Rational Paradigm views professionals as using software development methods despite empirical research showing that methods are rarely used, very rarely used as intended, and typically weak resources for informing situated action. This article therefore elucidates the Empirical Design Paradigm, an alternative view of software development more consistent with empirical evidence. Embracing the Empirical Paradigm is crucial for retaining scientific legitimacy, solving numerous practical problems and improving software engineering education.}
}
@article{ralph2018two,
	title        = {The two paradigms of software development research},
	author       = {Ralph, Paul},
	year         = 2018,
	journal      = {Science of Computer Programming},
	publisher    = {Elsevier},
	volume       = 156,
	pages        = {68--89}
}
@article{rinafe,
	title        = {Formulating design research questions: A framework},
	author       = {Goldschmidt, Gabriela and Matthews, Ben},
	year         = 2022,
	month        = {01},
	journal      = {Design Studies},
	volume       = 78,
	pages        = 101062,
	doi          = {10.1016/j.destud.2021.101062}
}
@inbook{Schieferdecker2019,
	title        = {Advanced Software Engineering, Developing and testing model-based software securely and efficiently},
	author       = {Schieferdecker, Ina and Ritter, Tom},
	year         = 2019,
	booktitle    = {Digital Transformation},
	publisher    = {Springer Berlin Heidelberg},
	address      = {Berlin, Heidelberg},
	pages        = {353--369},
	doi          = {10.1007/978-3-662-58134-6\_21},
	isbn         = {978-3-662-58134-6},
	url          = {https://doi.org/10.1007/978-3-662-58134-6\_21},
	editor       = {Neugebauer, Reimund},
	abstract     = {Software rules them all! In every industry now, software plays a dominant role in technical and business innovations, in improving functional safety, and also for increasing convenience. Nevertheless, software is not always designed, (re)developed, and/or secured with the necessary professionalism, and there are unnecessary interruptions in the development, maintenance, and operating chains that adversely affect reliable, secure, powerful , and trustworthy systems. Current surveys such as the annual World Quality Report put it bluntly, directly correlated with the now well-known failures of large-scale, important and/or safetycritical infrastructures caused by software. It is thus high time that software development be left to the experts and that space be created for the use of current methods and technologies. The present article sheds light on current and future software engineering approaches that can also and especially be found in the Fraunhofer portfolio.}
}
@misc{SE2015,
	title        = {Software Engineering 2014 Curriculum Guidelines for Undergraduate Degree Programs in Software Engineering A Volume of the Computing Curricula Series},
	author       = {Joint Task Force on Computing Curricula IEEE Computer Society Association for Computing Machinery},
	year         = 2015,
	publisher    = {ACM and IEEE},
	url          = {https://ieeecs-media.computer.org/assets/pdf/se2014.pdf}
}
@misc{Sheth2013,
	title        = {A gameful approach to teaching software design and software testing-assignments and quests},
	author       = {Sheth, Swapneel and Bell, Jonathan Schaffer and Kaiser, Gail E.},
	year         = 2013,
	publisher    = {Dept. of Computer Science, Columbia University}
}
@misc{sikuli,
	title        = {Sikuli},
	author       = {The Sikuli Team},
	year         = 2022,
	url          = {http://sikulix.com}
}
@inproceedings{silvis2021awesome,
	title        = {Awesome bug manifesto: Teaching an engaging and inspiring course on software testing (position paper)},
	author       = {Silvis-Cividjian, Natalia},
	year         = 2021,
	booktitle    = {3rd International Workshop on Software Engineering Education for the Next Generation (SEENG)},
	pages        = {16--20},
	organization = {IEEE}
}
@misc{souza2022,
	title        = {Roadblocks to Attracting Students to Software Testing Careers: Comparisons of Replicated Studies},
	author       = {Souza, Rodrigo E. C. and Santos, Ronnie E. de Souza and Capretz, Luiz Fernando and de Sousa, Marlon A. S. and de Magalhaes, Cleyton V. C.},
	year         = 2022,
	publisher    = {arXiv},
	doi          = {10.48550/ARXIV.2206.07877},
	url          = {https://arxiv.org/abs/2206.07877},
	copyright    = {Creative Commons Attribution 4.0 International},
	keywords     = {Software Engineering (cs.SE), FOS: Computer and information sciences, FOS: Computer and information sciences}
}
@book{taleb2007fooled,
	title        = {Fooled by Randomness: The Hidden Role of Chance in Life and in the Markets},
	author       = {Taleb, N.N.},
	year         = 2007,
	publisher    = {Penguin Books Limited},
	isbn         = 9780141930237,
	url          = {https://books.google.nl/books?id=uzkX3Vpj3ywC}
}
@book{thaler2021nudge,
	title        = {Nudge: The Final Edition},
	author       = {Thaler, R.H. and Sunstein, C.R.},
	year         = 2021,
	publisher    = {Penguin Publishing Group},
	isbn         = 9780525508526,
	url          = {https://books.google.nl/books?id=2rUsEAAAQBAJ},
	lccn         = 2021008636
}
@inbook{Tretmans2017,
	title        = {On the Existence of Practical Testers},
	author       = {Tretmans, Jan},
	year         = 2017,
	booktitle    = {ModelEd, TestEd, TrustEd: Essays Dedicated to Ed Brinksma on the Occasion of His 60th Birthday},
	publisher    = {Springer International Publishing},
	address      = {Cham},
	pages        = {87--106},
	doi          = {10.1007/978-3-319-68270-9\_5},
	isbn         = {978-3-319-68270-9},
	url          = {https://doi.org/10.1007/978-3-319-68270-9\_5},
	editor       = {Katoen, Joost-Pieter and Langerak, Rom and Rensink, Arend},
	abstract     = {Model-based testing is one of the promising technologies to increase the efficiency and effectiveness of software testing. This paper outlines the evolution of model-based testing based on labelled transition systems, from purely theoretical developments in the eighties to industrially applicable tools now: from canonical testers to practical testers. We present TorXakis as an example of a practical model-based tester, founded in the testing theory for labelled transition systems, and now being introduced in the daily practice of testing.}
}
@article{van_merrienboer_blueprints_2002,
	title        = {Blueprints for complex learning: {The} {4C}/{ID}-model},
	author       = {van Merri\"{e}nboer, Jeroen J.G. and Clark, Richard E. and De Croock, Marcel B.M.},
	year         = 2002,
	journal      = {Educational Technology Research and Development},
	volume       = 50,
	number       = 2,
	pages        = {39--61},
	note         = {Publisher: Springer}
}
@article{vos2013evolutionary,
	title        = {Evolutionary functional black-box testing in an industrial setting},
	author       = {Vos, Tanja EJ and Lindlar, Felix F and Wilmes, Benjamin and Windisch, Andreas and Baars, Arthur I and Kruse, Peter M and Gross, Hamilton and Wegener, Joachim},
	year         = 2013,
	journal      = {Software Quality Journal},
	publisher    = {Springer},
	volume       = 21,
	number       = 2,
	pages        = {259--288}
}
@book{whittaker2009exploratory,
	title        = {Exploratory Software Testing: Tips, Tricks, Tours, and Techniques to Guide Test Design},
	author       = {Whittaker, James A.},
	year         = 2009,
	publisher    = {Addison-Wesley Professional},
	isbn         = {0321636414},
	edition      = {1st},
	abstract     = {How to Find and Fix the Killer Software Bugs that Evade Conventional Testing In Exploratory Software Testing, renowned software testing expert James Whittaker reveals the real causes of todays most serious, well-hidden software bugs--and introduces powerful new exploratory techniques for finding and correcting them. Drawing on nearly two decades of experience working at the cutting edge of testing with Google, Microsoft, and other top software organizations, Whittaker introduces innovative new processes for manual testing that are repeatable, prescriptive, teachable, and extremely effective. Whittaker defines both in-the-small techniques for individual testers and in-the-large techniques to supercharge test teams. He also introduces a hybrid strategy for injecting exploratory concepts into traditional scripted testing. Youll learn when to use each, and how to use them all successfully. Concise, entertaining, and actionable, this book introduces robust techniques that have been used extensively by real testers on shipping software, illuminating their actual experiences with these techniques, and the results theyve achieved. Writing for testers, QA specialists, developers, program managers, and architects alike, Whittaker answers crucial questions such as: Why do some bugs remain invisible to automated testing--and how can I uncover them? What techniques will help me consistently discover and eliminate show stopper bugs? How do I make manual testing more effective--and less boring and unpleasant? Whats the most effective high-level test strategy for each project? Which inputs should I test when I cant test them all? Which test cases will provide the best feature coverage? How can I get better results by combining exploratory testing with traditional script or scenario-based testing? How do I reflect feedback from the development process, such as code changes?}
}
@article{wilson2013,
	title        = {A comparison of techniques for measuring sensemaking and learning within participant-generated summaries},
	author       = {Wilson, Mathew J. and Wilson, Max L.},
	year         = 2013,
	journal      = {Journal of the American Society for Information Science and Technology},
	volume       = 64,
	number       = 2,
	pages        = {291--306},
	doi          = {https://doi.org/10.1002/asi.22758},
	url          = {https://onlinelibrary.wiley.com/doi/abs/10.1002/asi.22758},
	keywords     = {summarization, learning, content analysis},
	eprint       = {https://onlinelibrary.wiley.com/doi/pdf/10.1002/asi.22758},
	abstract     = {While it is easy to identify whether someone has found a piece of information during a search task, it is much harder to measure how much someone has learned during the search process. Searchers who are learning often exhibit exploratory behaviors, and so current research is often focused on improving support for exploratory search. Consequently, we need effective measures of learning to demonstrate better support for exploratory search. Some approaches, such as quizzes, measure recall when learning from a fixed source of information. This research, however, focuses on techniques for measuring open-ended learning, which often involve analyzing handwritten summaries produced by participants after a task. There are two common techniques for analyzing such summaries: (a) counting facts and statements and (b) judging topic coverage. Both of these techniques, however, can be easily confounded by simple variables such as summary length. This article presents a new technique that measures depth of learning within written summaries based on Bloom's taxonomy (B.S. Bloom \& M.D. Engelhart, 1956). This technique was generated using grounded theory and is designed to be less susceptible to such confounding variables. Together, these three categories of measure were compared by applying them to a large collection of written summaries produced in a task-based study, and our results provide insights into each of their strengths and weaknesses. Both fact-to-statement ratio and our own measure of depth of learning were effective while being less affected by confounding variables. Recommendations and clear areas of future work are provided to help continued research into supporting sensemaking and learning.}
}
@book{NAP13362,
	title        = {Discipline-Based Education Research: Understanding and Improving Learning in Undergraduate Science and Engineering},
	author       = {National Research Council},
	year         = 2012,
	publisher    = {The National Academies Press},
	address      = {Washington, DC},
	doi          = {10.17226/13362},
	isbn         = {978-0-309-25411-3},
	url          = {https://nap.nationalacademies.org/catalog/13362/discipline-based-education-research-understanding-and-improving-learning-in-undergraduate},
	editor       = {Susan R. Singer and Natalie R. Nielsen and Heidi A. Schweingruber},
	abstract     = {The National Science Foundation funded a synthesis study on the status, contributions, and future direction of discipline-based education research (DBER) in physics, biological sciences, geosciences, and chemistry. DBER combines knowledge of teaching and learning with deep knowledge of discipline-specific science content. It describes the discipline-specific difficulties learners face and the specialized intellectual and instructional resources that can facilitate student understanding.\nDiscipline -Based Education Research is based on a 30-month study built on two workshops held in 2008 to explore evidence on promising practices in undergraduate science, technology, engineering, and mathematics (STEM) education. This book asks questions that are essential to advancing DBER and broadening its impact on undergraduate science teaching and learning. The book provides empirical research on undergraduate teaching and learning in the sciences, explores the extent to which this research currently influences undergraduate instruction, and identifies the intellectual and material resources required to further develop DBER.\nDiscipline-Based Education Research provides guidance for future DBER research. In addition, the findings and recommendations of this report may invite, if not assist, post-secondary institutions to increase interest and research activity in DBER and improve its quality and usefulness across all natural science disciples, as well as guide instruction and assessment across natural science courses to improve student learning. The book brings greater focus to issues of student attrition in the natural sciences that are related to the quality of instruction. Discipline-Based Education Research will be of interest to educators, policy makers, researchers, scholars, decision makers in universities, government agencies, curriculum developers, research sponsors, and education advocacy groups.}
}
@misc{doroudi_2021,
	title        = {A Primer on Learning Theories},
	author       = {Doroudi, Shayan},
	year         = 2021,
	month        = 8,
	publisher    = {EdArXiv},
	doi          = {10.35542/osf.io/ze5hc},
	url          = {edarxiv.org/ze5hc}
}
@book{schön2017reflective,
	title        = {The Reflective Practitioner: How Professionals Think in Action},
	author       = {Sch{\"o}n, D.A.},
	year         = 2017,
	publisher    = {Taylor \& Francis},
	isbn         = 9781351883153
}
@article{DORST1995,
	title        = {Comparing paradigms for describing design activity},
	author       = {Kees Dorst and Judith Dijkhuis},
	year         = 1995,
	journal      = {Design Studies},
	volume       = 16,
	number       = 2,
	pages        = {261--274},
	doi          = {https://doi.org/10.1016/0142-694X(94)00012-3},
	issn         = {0142-694X},
	url          = {https://www.sciencedirect.com/science/article/pii/0142694X94000123},
	note         = {Analysing Design Activity},
	keywords     = {protocol analysis, design activity, problem solving, reflection-in-action}
}
@article{Odden2018,
	title        = {Sensemaking epistemic game: A model of student sensemaking processes in introductory physics},
	author       = {Odden, Tor Ole. B. and Russ, Rosemary S.},
	year         = 2018,
	month        = 11,
	journal      = {Phys. Rev. Phys. Educ. Res.},
	publisher    = {American Physical Society},
	volume       = 14,
	number       = 2,
	pages        = {020122},
	doi          = {10.1103/PhysRevPhysEducRes.14.020122},
	url          = {https://link.aps.org/doi/10.1103/PhysRevPhysEducRes.14.020122},
	issue        = 2,
	numpages     = 16
}
@article{odden2019vexing,
	title        = {Vexing questions that sustain sensemaking},
	author       = {Tor Ole B. Odden and Rosemary S. Russ},
	year         = 2019,
	journal      = {International Journal of Science Education},
	publisher    = {Routledge},
	volume       = 41,
	number       = 8,
	pages        = {1052--1070},
	doi          = {10.1080/09500693.2019.1589655},
	url          = {https://doi.org/10.1080/09500693.2019.1589655},
	eprint       = {https://doi.org/10.1080/09500693.2019.1589655}
}
@article{Odden2021,
	title        = {How conceptual blends support sensemaking: A case study from introductory physics},
	author       = {Odden, Tor Ole B.},
	year         = 2021,
	journal      = {Science Education},
	volume       = 105,
	number       = 5,
	pages        = {989--1012},
	doi          = {https://doi.org/10.1002/sce.21674},
	url          = {https://onlinelibrary.wiley.com/doi/abs/10.1002/sce.21674},
	eprint       = {https://onlinelibrary.wiley.com/doi/pdf/10.1002/sce.21674}
}
@article{HRB2021,
	title        = {Making sense of sensemaking: using the sensemaking epistemic game to investigate student discourse during a collaborative gas law activity},
	author       = {Hunter, Kevin H. and Rodriguez, Jon-Marc G. and Becker, Nicole M.},
	year         = 2021,
	journal      = {Chem. Educ. Res. Pract.},
	publisher    = {The Royal Society of Chemistry},
	volume       = 22,
	pages        = {328--346},
	doi          = {10.1039/D0RP00290A},
	url          = {http://dx.doi.org/10.1039/D0RP00290A},
	issue        = 2
}
@article{SC2018,
	title        = {Epistemic games in substance characterization},
	author       = {Sevian, Hannah and Couture, Steven},
	year         = 2018,
	journal      = {Chem. Educ. Res. Pract.},
	publisher    = {The Royal Society of Chemistry},
	volume       = 19,
	pages        = {1029--1054},
	doi          = {10.1039/C8RP00047F},
	url          = {http://dx.doi.org/10.1039/C8RP00047F},
	issue        = 4
}
%https://pubs.rsc.org/en/content/articlehtml/2022/rp/d1rp00119a
@article{KS2022,
	title        = {Development of a framework to capture abstraction in physical chemistry problem solving},
	author       = {Karch, Jessica M. and Sevian, Hannah},
	year         = 2022,
	journal      = {Chem. Educ. Res. Pract.},
	publisher    = {The Royal Society of Chemistry},
	volume       = 23,
	pages        = {55--77},
	doi          = {10.1039/D1RP00119A},
	url          = {http://dx.doi.org/10.1039/D1RP00119A},
	issue        = 1
}
@article{CIS2013,
	title        = {Epistemic game for answer making in learning about hydrostatics},
	author       = {Chen, Ying and Irving, Paul and Sayre, Eleanor},
	year         = 2013,
	month        = {03},
	journal      = {Physical Review Special Topics - Physics Education Research},
	volume       = 9,
	pages        = {},
	doi          = {10.1103/PhysRevSTPER.9.010108}
}
@article{KRDM2014,
	title        = {Partial Derivative Games in Thermodynamics: A Cognitive Task Analysis},
	author       = {Kustusch, Mary Bridget and Roundy, David and Dray, Tevian and Manogue, Corinne},
	year         = 2013,
	month        = {01},
	journal      = {Physical Review Special Topics -- Physics Education Research},
	volume       = 10,
	pages        = {},
	doi          = {10.1103/PhysRevSTPER.10.010101}
}
@article{TR2007,
	title        = {Elements of a cognitive model of physics problem solving: Epistemic games},
	author       = {Tuminaro, Jonathan and Redish, Edward F.},
	year         = 2007,
	month        = 7,
	journal      = {Phys. Rev. ST Phys. Educ. Res.},
	publisher    = {American Physical Society},
	volume       = 3,
	pages        = {020101},
	doi          = {10.1103/PhysRevSTPER.3.020101},
	url          = {https://link.aps.org/doi/10.1103/PhysRevSTPER.3.020101},
	issue        = 2,
	numpages     = 22
}
@inproceedings{QRS2021,
	title        = {Exploring students' sensemaking of test case design. An initial study},
	author       = {Doorn, Niels and Vos, Tanja E. J. and Mar\'{\i}n, Beatriz and Passier, Harrie and Bijlsma, Lex and Cacace, Silvio},
	year         = 2021,
	booktitle    = {21st International Conference on Software Quality, Reliability and Security Companion (QRS-C)},
	volume       = {},
	number       = {},
	pages        = {1069--1078},
	doi          = {10.1109/QRS-C55045.2021.00161}
}
@article{BK10,
	title        = {Playing Epistemic Games in Science and Mathematics Classrooms},
	author       = {Bielaczyc, Kate and Kapur, Manu},
	year         = 2010,
	month        = {01},
	journal      = {Educational Technology},
	volume       = 50,
	pages        = {}
}
@article{Shaff2006,
	title        = {Epistemic frames for epistemic games},
	author       = {Shaffer, David},
	year         = 2006,
	month        = {04},
	journal      = {Computers \& Education},
	volume       = 46,
	pages        = {223--234},
	doi          = {10.1016/j.compedu.2005.11.003}
}
@inproceedings{10.5555/1150034.1150069,
	title        = {Press Play: Designing an Epistemic Game Engine for Journalism},
	author       = {Hatfield, David and Shaffer, David Williamson},
	year         = 2006,
	booktitle    = { 7th International Conference on Learning Sciences},
	location     = {Bloomington, Indiana},
	publisher    = {International Society of the Learning Sciences},
	series       = {ICLS '06},
	pages        = {236–242},
	isbn         = {0805861742},
	numpages     = 7
}
@article{CollinsFerguson1993,
	title        = {Epistemic forms and Epistemic Games: Structures and Strategies to Guide Inquiry},
	author       = {Allan Collins and William Ferguson},
	year         = 1993,
	journal      = {Educational Psychologist},
	publisher    = {Routledge},
	volume       = 28,
	number       = 1,
	pages        = {25--42},
	doi          = {10.1207/s15326985ep2801\_3}
}
@article{morrison1995epistemic,
	title        = {Epistemic fluency and constructivist learning environments},
	author       = {Morrison, Donald and Collins, Allan},
	year         = 1995,
	journal      = {Educational Technology},
	publisher    = {JSTOR},
	volume       = 35,
	number       = 5,
	pages        = {39--45}
}
@article{collins1993epistemic,
	title        = {Epistemic forms and epistemic games: Structures and strategies to guide inquiry},
	author       = {Collins, Allan and Ferguson, William},
	year         = 1993,
	journal      = {Educational psychologist},
	publisher    = {Taylor \& Francis},
	volume       = 28,
	number       = 1,
	pages        = {25--42}
}
@article{snowden2005multi,
	title        = {Multi-ontology sense making: a new simplicity in decision making},
	author       = {Snowden, David},
	year         = 2005,
	journal      = {Journal of Innovation in Health Informatics},
	volume       = 13,
	number       = 1,
	pages        = {45--53}
}
@misc{nhlstendenwebsite,
	title        = {NHL Stenden Hogeschool},
	year         = 2022,
	month        = 12,
	url          = {https://www.nhlstenden.com},
	note         = {[Online; accessed 9. Dec. 2022]}
}
@misc{upvwebsite,
	title        = {Universitat Polit\`{e}cnica de Val\`{e}ncia},
	year         = 2022,
	month        = 12,
	url          = {http://www.upv.es/en},
	note         = {[Online; accessed 9. Dec. 2022]}
}
@misc{ouwebsite,
	title        = {{Open Universiteit}},
	year         = 2022,
	month        = 12,
	url          = {https://www.ou.nl/en},
	note         = {[Online; accessed 9. Dec. 2022]}
}
@inproceedings{rauth2010design,
	title        = {Design thinking: An educational model towards creative confidence},
	author       = {Rauth, Ingo and K{\"o}ppen, Eva and Jobst, Birgit and Meinel, Christoph and others},
	year         = 2010,
	booktitle    = {DS 66-2: 1st international conference on design creativity (ICDC 2010)}
}
@article{Stouthard2016-jz,
	title        = {{PhD} competence model},
	author       = {Stouthard, Marlies},
	year         = 2016,
	month        = aug,
	journal      = {Intrinsic act.},
	publisher    = {Austrian Pharmacological Society (APHAR)},
	volume       = 4,
	number       = {Suppl. 1},
	pages        = {A3.5}
}
@inproceedings{lister2022,
	title        = {Some Thoughts on Designing Eye Movement Studies for Novice Programmers},
	author       = {Lister, Raymond},
	year         = 2022,
	booktitle    = {10th International Workshop on Eye Movements in Programming},
	location     = {Pittsburgh, Pennsylvania},
	publisher    = {ACM},
	
	series       = {EMIP '22},
	pages        = {15–22},
	doi          = {10.1145/3524488.3527363},
	isbn         = 9781450392891,
	url          = {https://doi.org/10.1145/3524488.3527363},
	abstract     = {I first describe my three-stage model of how novices understand code. In the first stage, the novice cannot trace code. In the second stage, the novice has mastered tracing, but, crucially, that is the only skill they have mastered. It is only when novices reach the third stage that they begin to reason about code in a more general, abstract way. Most programming instructors mistakenly assume that all students begin at the third stage. Having described the three-stage model, I then explore implications of the model for the design of eye movement studies. I also provide some pieces of code that would make for interesting eye movement studies.},
	numpages     = 8,
	keywords     = {eye movement, novice programmers, eye scanning}
}
@inproceedings{lister2004,
	title        = {A Multi-National Study of Reading and Tracing Skills in Novice Programmers},
	author       = {Lister, Raymond and Adams, Elizabeth S. and Fitzgerald, Sue and Fone, William and Hamer, John and Lindholm, Morten and McCartney, Robert and Mostr\"{o}m, Jan Erik and Sanders, Kate and Sepp\"{a}l\"{a}, Otto and Simon, Beth and Thomas, Lynda},
	year         = 2004,
	booktitle    = {Working Group Reports from ITiCSE on Innovation and Technology in Computer Science Education},
	location     = {Leeds, United Kingdom},
	publisher    = {ACM},
	
	series       = {ITiCSE-WGR '04},
	pages        = {119–150},
	doi          = {10.1145/1044550.1041673},
	isbn         = 9781450377942,
	url          = {https://doi.org/10.1145/1044550.1041673},
	abstract     = {A study by a ITiCSE 2001 working group ("the McCracken Group") established that many students do not know how to program at the conclusion of their introductory courses. A popular explanation for this incapacity is that the students lack the ability to problem-solve. That is, they lack the ability to take a problem description, decompose it into sub-problems and implement them, then assemble the pieces into a complete solution. An alternative explanation is that many students have a fragile grasp of both basic programming principles and the ability to systematically carry out routine programming tasks, such as tracing (or "desk checking") through code. This ITiCSE 2004 working group studied the alternative explanation, by testing students from seven countries, in two ways. First, students were tested on their ability to predict the outcome of executing a short piece of code. Second, students were tested on their ability, when given the desired function of short piece of near-complete code, to select the correct completion of the code from a small set of possibilities. Many students were weak at these tasks, especially the latter task, suggesting that such students have a fragile grasp of skills that are a prerequisite for problem-solving.},
	numpages     = 32
}
@inproceedings{lopez2008,
	title        = {Relationships between Reading, Tracing and Writing Skills in Introductory Programming},
	author       = {Lopez, Mike and Whalley, Jacqueline and Robbins, Phil and Lister, Raymond},
	year         = 2008,
	booktitle    = {4th International Workshop on Computing Education Research},
	location     = {Sydney, Australia},
	publisher    = {ACM},
	
	series       = {ICER '08},
	pages        = {101–112},
	doi          = {10.1145/1404520.1404531},
	isbn         = 9781605582160,
	url          = {https://doi.org/10.1145/1404520.1404531},
	abstract     = {This study analyzed student responses to an examination, after the students had completed one semester of instruction in programming. The performance of students on code tracing tasks correlated with their performance on code writing tasks. A correlation was also found between performance on "explain in plain English" tasks and code writing. A stepwise regression, with performance on code writing as the dependent variable, was used to construct a path diagram. The diagram suggests the possibility of a hierarchy of programming related tasks. Knowledge of programming constructs forms the bottom of the hierarchy, with "explain in English", Parson's puzzles, and the tracing of iterative code forming one or more intermediate levels in the hierarchy.},
	numpages     = 12,
	keywords     = {SOLO taxonomy, novice programmers, comprehension, CS1}
}
@inproceedings{venables2009,
	title        = {A Closer Look at Tracing, Explaining and Code Writing Skills in the Novice Programmer},
	author       = {Venables, Anne and Tan, Grace and Lister, Raymond},
	year         = 2009,
	booktitle    = {5th International Workshop on Computing Education Research Workshop},
	location     = {Berkeley, CA, USA},
	publisher    = {ACM},
	
	series       = {ICER '09},
	pages        = {117–128},
	doi          = {10.1145/1584322.1584336},
	isbn         = 9781605586151,
	url          = {https://doi.org/10.1145/1584322.1584336},
	abstract     = {The way in which novice programmers learn to write code is of considerable interest to computing education researchers. One research approach to understanding how beginners acquire their programming abilities has been to look at student performance in exams. Lopez et al. (2008) analyzed student responses to an end-of-first-semester exam. They found two types of questions accounted for 46\% of the variance on the code writing portion of the same exam. One of those types of question required students to trace iterative code, while the other type required students to explain what a piece of code did. In this paper, we investigate whether the results by Lopez et al. may be generally indicative of something about novice programmers, or whether their results are just an artifact of their particular exam. We studied student responses to our own exam and our results are broadly consistent with Lopez et al. However, we did find that some aspects of their model are sensitive to the particular exam questions used. Specifically, we found that student performance on explaining code was hard to characterize, and the strength of the relationship between explaining and code writing is particularly sensitive to the specific questions asked. Additionally, we found Lopez et al.'s use of a Rasch model to be unnecessary, which will make it far easier for others to conduct similar research.},
	numpages     = 12,
	keywords     = {comprehension, CS1, novice programmers, tracing, hierarchy}
}
@inproceedings{lister2016,
	title        = {Toward a Developmental Epistemology of Computer Programming},
	author       = {Lister, Raymond},
	year         = 2016,
	booktitle    = {11th Workshop in Primary and Secondary Computing Education},
	location     = {M\"{u}nster, Germany},
	publisher    = {ACM},
	
	series       = {WiPSCE '16},
	pages        = {5–16},
	doi          = {10.1145/2978249.2978251},
	isbn         = 9781450342230,
	url          = {https://doi.org/10.1145/2978249.2978251},
	abstract     = {This paper was written as a companion to my keynote address at the 11th Workshop in Primary and Secondary Computing Education (WiPSCE 2016). The paper outlines my own research on how novices learn to program. Any reader whose interest has been piqued may pursue furher detail in the papers cited. I begin by explaining my philosophical position. In making that explanation, I do not claim that it is the only right position; on the contrary I allude to other philosophical positions that I regard as complimentary to my own. The academic warfare between these positions is pointless and counterproductive --- all the established positions have something positive to offer. Having established my position, I then go on to argue that the work of Jean Piaget, and subsequent neo-Piagetians, offers useful insight into how children learn to program computers.},
	numpages     = 12
}
@inproceedings{gilsing2021,
	title        = {Gradual Programming in Hedy: A First User Study},
	author       = {M. Gilsing and F. Hermans},
	year         = 2021,
	
	booktitle    = {Symposium on Visual Languages and Human-Centric Computing (VL/HCC)},
	publisher    = {IEEE},
	
	volume       = {},
	pages        = {1--9},
	doi          = {10.1109/VL/HCC51201.2021.9576236},
	issn         = {},
	url          = {https://doi-ieeecomputersociety-org.ezproxy.elib10.ub.unimaas.nl/10.1109/VL/HCC51201.2021.9576236},
	abstract     = {Recently the gradual programming approach was introduced, which proposes to lower the syntax barrier by starting with a very simple language, and gradually adding both concepts and refining syntax. Hedy is the first language to implement a gradual approach, and this paper presents the first user study on Hedy with 39 children between age 11 and age 14 who followed online lessons for six weeks. Based on lesson observations and a written survey filled out by the participants, we aim to understand the impact of using a gradual language. Our findings show that children appreciate the gradual nature of Hedy, find Hedy easy to learn and especially appreciate the power to control the difficulty of Hedy themselves. They also like and frequently use built-in education features like example code snippets. Challenges of a gradual approach are the fact that commands sometimes change or overlap, and remembering commands and specific syntax remain a challenge. According to the participants, improvements could be made by making Hedy less sensitive to syntax errors, by improving error messages and by localizing keywords to the native language of children.},
	keywords     = {visualization;codes;refining;education;syntactics;programming profession}
}
%% TILE
@article{lee2011,
	title        = {Computational Thinking for Youth in Practice},
	author       = {Lee, Irene and Martin, Fred and Denner, Jill and Coulter, Bob and Allan, Walter and Erickson, Jeri and Malyn-Smith, Joyce and Werner, Linda},
	year         = 2011,
	month        = {feb},
	journal      = {ACM Inroads},
	publisher    = {ACM},
	
	volume       = 2,
	number       = 1,
	pages        = {32–37},
	doi          = {10.1145/1929887.1929902},
	issn         = {2153-2184},
	url          = {https://doi.org/10.1145/1929887.1929902},
	issue_date   = {March 2011},
	abstract     = {Computational thinking (CT) has been described as the use of abstraction, automation, and analysis in problem-solving [3]. We examine how these ways of thinking take shape for middle and high school youth in a set of NSF-supported programs. We discuss opportunities and challenges in both in-school and after-school contexts. Based on these observations, we present a "use-modify-create" framework, representing three phases of students' cognitive and practical activity in computational thinking. We recommend continued investment in the development of CT-rich learning environments, in educators who can facilitate their use, and in research on the broader value of computational thinking.},
	numpages     = 6,
	keywords     = {analysis, computer science education, automation, abstraction, computational thinking}
}
@misc{ISTQBglossary,
	title        = {{ISTQB Glossary}},
	year         = 2022,
	month        = dec,
	url          = {https://glossary.istqb.org/en/search},
	note         = {[Online; accessed 27. Dec. 2022]}
}
@misc{IEEE2008,
	title        = {{IEEE Standards Association}},
	year         = 2008,
	month        = jul,
	journal      = {IEEE Standards Association},
	url          = {https://standards.ieee.org/ieee/829/3787},
	note         = {[Online; accessed 27. Dec. 2022]}
}
@techreport{JTFCC2015,
	title        = {Curriculum Guidelines for Undergraduate Degree Programs in Software Engineering},
	author       = {The Joint Task Force on Computing Curricula},
	year         = 2015,
	publisher    = {ACM},
	
	institution  = {ACM},
	abstract     = {The primary purpose of this volume is to provide guidance to academic institutions and accreditation agencies about what should constitute an undergraduate software engineering education. These recommendations have been developed by a broad, internationally based group of volunteer participants. This group has taken into account much of the work that has been done in software engineering education over the last quarter of a century. Software engineering curriculum recommendations are of particular relevance, since there is currently a surge in the creation of software engineering degree programs and accreditation processes for such programs have been established in a number of countries.}
}
@article{Garousi2020,
	title        = {Software-testing education: {A} systematic literature mapping},
	author       = {Garousi, Vahid and Rainer, Austen and Lauv\aa{}s, Per and Arcuri, Andrea},
	year         = 2020,
	month        = jul,
	journal      = {J. Syst. Software},
	publisher    = {Elsevier BV},
	volume       = 165,
	pages        = 110570,
	doi          = {10.1016/j.jss.2020.110570},
	issn         = {0164-1212},
	url          = {https://doi.org/10.1016/j.jss.2020.110570},
	bibsource    = {dblp computer science bibliography, https://dblp.org},
	biburl       = {https://dblp.org/rec/journals/jss/GarousiRLA20.bib},
	timestamp    = {Mon, 15 Jun 2020 16:55:36 +0200},
	source       = {Crossref}
}
@inproceedings{MS05,
	title        = {Testing First: Emphasizing Testing in Early Programming Courses},
	author       = {Marrero, Will and Settle, Amber},
	year         = 2005,
	booktitle    = {10th Annual SIGCSE Conference on Innovation and Technology in Computer Science Education},
	location     = {Caparica, Portugal},
	publisher    = {ACM},
	
	series       = {ITiCSE '05},
	pages        = {4–8},
	doi          = {10.1145/1067445.1067451},
	isbn         = 1595930248,
	url          = {https://doi.org/10.1145/1067445.1067451},
	abstract     = {The complexity of languages like Java and C++ can make introductory programming classes in these languages extremely challenging for many students. Part of the complexity comes from the large number of concepts and language features that students are expected to learn while having little time for adequate practice or examples. A second source of difficulty is the emphasis that object-oriented programming places on abstraction. We believe that by placing a larger emphasis on testing in programming assignments in these introductory courses, students have an opportunity for extra practice with the language, and this affords them a gentler transition into the abstract thinking needed for programming. In this paper we describe how we emphasized testing in introductory programming assignments by requiring that students design and implement tests before starting on the program itself. We also provide some preliminary results and student reactions.},
	numpages     = 5,
	keywords     = {CS1, testing, TDD, CS2}
}
@book{coursebook2019,
	title        = {Software Testing},
	author       = {Vos, Tanja E. J. and van Vugt-Hage, Nik\`{e}},
	year         = 2019,
	publisher    = {Open Universiteit The Netherlands},
	address      = {Heerlen},
	isbn         = {978 94 92739 59 9}
}
@book{Merrienboer1997,
	title        = {Training complex cognitive skills: A four-component instructional design model for technical training},
	author       = {{van Merrienboer}, J.J.G.},
	year         = 1997,
	publisher    = {Educational Technology Publications},
	address      = {Englewood Cliffs, N.J.},
	keywords     = {METIS-135635},
	language     = {Undefined}
}
@misc{testsphere,
	title        = {{TestSphere}},
	year         = 2022,
	month        = dec,
	journal      = {Ministry of Testing},
	url          = {https://www.ministryoftesting.com/testsphere},
	note         = {[Online; accessed 23. Jun. 2023]}
}
@misc{heuriskit,
	title        = {{Would Heu-risk It?}},
	year         = 2022,
	month        = dec,
	journal      = {Ministry of Testing},
	url          = {https://www.ministryoftesting.com/dojo/lessons/would-heu-risk-it},
	note         = {[Online; accessed 23. Jun. 2023]}
}
@misc{fluxx,
	title        = {{What's Fluxx?}},
	year         = 2022,
	month        = jul,
	journal      = {Looney Labs},
	url          = {https://www.looneylabs.com/fluxx},
	note         = {[Online; accessed 23. Jun. 2023]}
}
@article{DOORN2023102199,
	title        = {Towards understanding students' sensemaking of test case design},
	author       = {Niels Doorn and Tanja E.J. Vos and Beatriz Mar\'{\i}n},
	year         = 2023,
	journal      = {Data \& Knowledge Engineering},
	volume       = 146,
	pages        = 102199,
	doi          = {https://doi.org/10.1016/j.datak.2023.102199},
	issn         = {0169-023X},
	url          = {https://www.sciencedirect.com/science/article/pii/S0169023X23000599},
	keywords     = {Software Testing, Sensemaking, Software Engineering, Computer science educational research, Higher education},
	abstract     = {Context: Software testing is the most used technique for quality assurance in industry. However, in computer science education software testing is still treated as a second-class citizen and students are unable to test their software well enough. One reason for this is that teaching the subject of software testing is difficult as it is a complex intellectual activity for which students need to allocate multiple cognitive resources at the same time. A myriad of primary and secondary studies have tried to solve this problem in education, however still with very limited results. Objective: Before we can design interventions to improve our pedagogical approaches, we need to gain more in-depth understanding and recognition of sensemaking as it is happening when students design test cases. Method: An initial exploratory study identified four different sensemaking approaches used by students while creating test models. In this paper we present a follow-up study with 50 students from a large university in Spain. The used methodology was based on the previous study with the improvements that originated from its evaluation. We asked the participants to create a test model based on a description of a test problem using a specialized web-based tool for modeling test cases. We measured how well these models fit the test problem, the sensemaking process that students went through when creating the models, and the students' perception of the modeling task. The participants received no compensation for their efforts, and we scheduled the experiment during a regular class. Apart from the created models and their metadata, we also collected recordings of the students' computer screens made during the experiment and used a questionnaire to study their perspectives on the assignment. All the collected textual, graphical, and video data was analyzed using an iterative inductive analysis process to allow new information about the different sensemaking approaches to emerge. Results: We gained better insights into the sensemaking processes of students while modeling test cases for a problem. The results enabled us to refine our previous findings, and we identified new sensemaking approaches. Conclusions: Based on these results, we can further investigate ways to influence the sensemaking process in education, the possible misconceptions that have a negative influence on it, and the desired mental model we want our students to have to design test cases.}
}
@inproceedings{SIGSCE_2019_CodeDefenders,
	title        = {Gamifying a Software Testing Course with Code Defenders},
	author       = {Gordon Fraser and Alessio Gambi and Marvin Kreis and Jos{\'e} Miguel Rojas},
	year         = 2019,
	booktitle    = {Proc. of the ACM Technical Symposium on Computer Science Education (SIGCSE)},
	publisher    = {ACM},
	series       = {SIGCSE'19}
}
@article{blakeslee2004craap,
	title        = {The CRAAP test},
	author       = {Blakeslee, Sarah},
	year         = 2004,
	journal      = {Loex Quarterly},
	volume       = 31,
	number       = 3,
	pages        = 4
}
% lit review

%%% ACM1 results
@inproceedings{10.1145/3548771.3570193,
	title        = {Gamifying Software Testing (Keynote)},
	author       = {Fraser, Gordon},
	year         = 2022,
	booktitle    = {1st International Workshop on Gamification of Software Development, Verification, and Validation (GAMIFY)},
	location     = {Singapore, Singapore},
	publisher    = {ACM},
	
	series       = {Gamify 2022},
	pages        = 1,
	doi          = {10.1145/3548771.3570193},
	isbn         = 9781450394543,
	url          = {https://doi-org.ezproxy.elib10.ub.unimaas.nl/10.1145/3548771.3570193},
	abstract     = {Writing good software tests is difficult and not every developer's favourite occupation. If an activity is so difficult, boring, or otherwise unattractive that people do not want to engage with it, then gamification offers a solution: By turning the activity into a fun and competitive task, participants engage, compete, and excel. In this talk, I will explore how this idea can be integrated into software testing tools (e.g. IDEs), processes (e.g. continuous integration), and education. Our experiences with gamified testing illustrate the potential of using gamification to address some of the many problems that we are facing today in software testing. There are, however, many challenges ahead, and I will outline some of the challenges and research opportunities related to gamifying software testing.},
	numpages     = 1
}
@inproceedings{10.1145/3287324.3287471,
	title        = {Gamifying a Software Testing Course with Code Defenders},
	author       = {Fraser, Gordon and Gambi, Alessio and Kreis, Marvin and Rojas, Jos\'{e} Miguel},
	year         = 2019,
	booktitle    = {50th ACM Technical Symposium on Computer Science Education},
	location     = {Minneapolis, MN, USA},
	publisher    = {ACM},
	
	series       = {SIGCSE '19},
	pages        = {571–577},
	doi          = {10.1145/3287324.3287471},
	isbn         = 9781450358903,
	url          = {https://doi-org.ezproxy.elib10.ub.unimaas.nl/10.1145/3287324.3287471},
	abstract     = {Software testing is an essential skill for software developers, but it is challenging to get students engaged in this activity. The Code Defenders game addresses this problem by letting students compete over code under test by either introducing faults ("attacking") or by writing tests ("defending") to reveal these faults. In this paper, we describe how we integrated Code Defenders as a semester-long activity of an undergraduate and graduate level university course on software testing. We complemented the regular course sessions with weekly Code Defenders sessions, addressing challenges such as selecting suitable code to test, managing games, and assessing performance. Our experience and our data show that the integration of Code Defenders was well-received by students and led them to practice testing thoroughly. Positive learning effects are evident as student performance improved steadily throughout the semester.},
	numpages     = 7,
	keywords     = {software testing education, mutation analysis, unit testing, testing game, software engineering education}
}
@inproceedings{10.1145/3350768.3352456,
	title        = {Towards a Conversational Agent to Support the Software Testing Education},
	author       = {Paschoal, Leo Natan and Turci, Lucas Fernandes and Conte, Tayana Uch\^{o}a and Souza, Simone R. S.},
	year         = 2019,
	booktitle    = { XXXIII Brazilian Symposium on Software Engineering},
	location     = {Salvador, Brazil},
	publisher    = {ACM},
	
	series       = {SBES '19},
	pages        = {57–66},
	doi          = {10.1145/3350768.3352456},
	isbn         = 9781450376518,
	url          = {https://doi-org.ezproxy.elib10.ub.unimaas.nl/10.1145/3350768.3352456},
	abstract     = {The training of professionals in the field of software testing is increasing its relevance in the past few years and, therefore, efforts in appropriate methodologies for the learning-teaching process in this context have been proposed and appreciated. The emergence of pedagogical models, such as flipped classroom and team-based learning, which demand from the students a previous study of the theory before the lecture, creates a concern: how to support the before class learning? Because of the hybrid nature of these pedagogical models, which means they mix elements from traditional and distance education, it is possible that the support mechanisms used in distance learning platforms, such as conversational agents, can be applied for this matter. At the same time in which the academic work tries carefully to provide a proper software testing formation, there are also many contributions being established regarding the training and non-formal learning. Improvement and personal training courses about criteria, tools, and software testing good practices are being created by teaching institutes and offered in Massive Open Online Courses platforms (MOOCs). However, in this type of course, in the absence of a teacher, the student might be in a situation where there is nobody available to answer their questions about the topic. In this paper, we propose the use of conversational agents in solving the problems and challenges which encompass the learning through MOOCs and hybrid models. A conversational agent, called TOB-SST is proposed to support software testing education. A viability study was conducted to understand the quality of the given answers by TOB-SST and the possibility of it serving as a learning support tool. The results indicate that it is promising to employ a conversational agent to guide student study.},
	numpages     = 10,
	keywords     = {Software Testing, Computer Science Education, Chatbot}
}
@article{10.1145/3582273,
	title        = {A Review on Tools, Mechanics, Benefits, and Challenges of Gamified Software Testing},
	author       = {Fulcini, Tommaso and Coppola, Riccardo and Ardito, Luca and Torchiano, Marco},
	year         = 2023,
	month        = {jul},
	journal      = {ACM Comput. Surv.},
	publisher    = {ACM},
	
	volume       = 55,
	number       = {14s},
	doi          = {10.1145/3582273},
	issn         = {0360-0300},
	url          = {https://doi-org.ezproxy.elib10.ub.unimaas.nl/10.1145/3582273},
	issue_date   = {December 2023},
	abstract     = {Gamification is an established practice in Software Engineering to increase effectiveness and engagement in many practices. This manuscript provides a characterization of the application of gamification to the Software Testing area. Such practice in fact reportedly suffers from low engagement by both personnel in industrial contexts and learners in educational contexts. Our goal is to identify the application areas and utilized gamified techniques and mechanics, the provided benefits and drawbacks, as well as the open challenges in the field. To this purpose, we conducted a Multivocal Literature Review to identify white and grey literature sources addressing gamified software testing.We analyzed 73 contributions and summarized the most common gamified mechanics, concepts, tools, and domains where they are mostly applied. We conclude that gamification in software testing is mostly applied to the test creation phase with simple white-box unit or mutation testing tools and is mostly used to foster good behaviors by promoting the testers' accomplishment. Key research areas and main challenges in the field are: careful design of tailored gamified mechanics for specific testing techniques; the need for technological improvements to enable crowdsourcing, cooperation, and concurrency; the necessity for empirical and large-scale evaluation of the benefits delivered by gamification mechanics.},
	articleno    = 310,
	numpages     = 37,
	keywords     = {testing and debugging gamification, Multivocal Literature Review, Software/program verification, Software Engineering, Systematic Literature Review, software testing}
}
@article{10.1145/3218279,
	title        = {Evaluating GSD-Aware: A Serious Game for Discovering Global Software Development Challenges},
	author       = {Vizca\'{\i}no, Aurora and Garc\'{\i}a, F\'{e}lix and Guzm\'{a}n, Ignacio Garc\'{\i}a Rodriguez De and Moraga, M. \'{A}ngeles},
	year         = 2019,
	month        = {jan},
	journal      = {ACM Trans. Comput. Educ.},
	publisher    = {ACM},
	
	volume       = 19,
	number       = 2,
	doi          = {10.1145/3218279},
	url          = {https://doi-org.ezproxy.elib10.ub.unimaas.nl/10.1145/3218279},
	issue_date   = {June 2019},
	abstract     = {Global Software Development (GSD) is currently a strong industry trend. This means that if computer science engineers are to be trained to deal with this model, it is very important to include the topic in software engineering courses, attempting to ensure that students learn about GSD and become familiar with its advantages and challenges. However, software engineering courses do not always consider including it in their curricula. It must also be recognized that it is difficult to find a suitable method to teach/develop the different skills needed for GSD. There is often a lot of content and not a great deal of time available to teach it. In this article, we propose the use of a serious game called GSD-Aware, with which students can ``suffer'' some of the typical challenges of GSD by interacting with avatars and by using several means of communication to solve a number of problems posed. The article focuses on the description of the game and on the empirical study conducted to analyze whether GSD-Aware helps students to be conscious of GSD challenges. It was discovered that after 50 minutes playing the game, the students were aware of the greater influence that the following factors can have: lack of coordination, lack of trust, cultural differences, lack of face-to-face and informal communication, time difference, and lack of team spirit. In their final analysis, students agreed that the serious game scenarios helped them to understand what GSD is and to grasp the importance of some GSD challenges.},
	articleno    = 14,
	numpages     = 23,
	keywords     = {Global software engineering, serious game}
}
@inproceedings{10.1145/3548771.3561411,
	title        = {Gamification of Exploratory Testing Process},
	author       = {Ozturk, Savas},
	year         = 2022,
	booktitle    = {1st International Workshop on Gamification of Software Development, Verification, and Validation},
	location     = {Singapore, Singapore},
	publisher    = {ACM},
	
	series       = {Gamify 2022},
	pages        = {14–17},
	doi          = {10.1145/3548771.3561411},
	isbn         = 9781450394543,
	url          = {https://doi-org.ezproxy.elib10.ub.unimaas.nl/10.1145/3548771.3561411},
	abstract     = {Exploratory testing is an experience-based testing technique often used in addition to formal ones. However, it can be used as a replacement for formal techniques when time is limited and/or documentation is poor. Conducting test charters and maximizing efficiency are seen as tough works due to their informal nature. Dividing test load to testers, scoring the severity level, consolidating the results, and reporting the issues are some challenges of this process. In this experience study, efforts of gamifying exploratory testing process are told. A public institution in Turkiye demanded software testing for their software for a limited timeframe and employed testers were motivated by gamification efforts. It was seen that gamification helped us detecting more critical faults quickly. Failure cases such as test contest organization attempts are told as well.},
	numpages     = 4,
	keywords     = {manual testing, exploratory testing, software testing, gamification}
}
@inproceedings{10.1145/3629479.3629496,
	title        = {An Open Educational Resource Supporting Mutation Testing Teaching},
	author       = {Paschoal, Leo Natan and Ruiz, Jo\~{a}o Pedro S. M. and Souza, Simone R. S.},
	year         = 2023,
	booktitle    = {XXII Brazilian Symposium on Software Quality},
	location     = {<conf-loc>, <city>Bras\'{\i}lia</city>, <country>Brazil</country>, </conf-loc>},
	publisher    = {ACM},
	
	series       = {SBQS '23},
	pages        = {291–300},
	doi          = {10.1145/3629479.3629496},
	isbn         = 9798400707865,
	url          = {https://doi-org.ezproxy.elib10.ub.unimaas.nl/10.1145/3629479.3629496},
	abstract     = {Mutation testing is widely recognized as one of the most effective criteria for software testing to uncover defects. However, there is an urgent need for more significant efforts to promote learning and understanding of this criterion. Currently, teaching support mechanisms in software testing tend to prioritize other criteria over mutation testing, exacerbating the gap. In this paper, we introduce MUT-STT, an open educational resource specifically designed to address this gap and facilitate the dissemination of critical concepts and practical aspects of mutation testing. MUT-STT focuses on the intrinsic concepts of the mutation testing criterion, providing comprehensive support for learners. It incorporates review exercises, offers tool suggestions for test automation, and provides clear instructions on applying the mutation test criterion using Python. An evaluation was conducted to ensure the educational resource's content was complete and correct. In this evaluation, experts in mutation testing carefully examined MUT-STT, identifying and addressing any conceptual or descriptive defects that may have persisted.},
	numpages     = 10,
	keywords     = {Open Education, Software Engineering Education, Software Testing.}
}
@inproceedings{10.1145/3350768.3352490,
	title        = {CleanGame: Gamifying the Identification of Code Smells},
	author       = {dos Santos, Hoyama Maria and Durelli, Vinicius H. S. and Souza, Maur\'{\i}cio and Figueiredo, Eduardo and da Silva, Lucas Timoteo and Durelli, Rafael S.},
	year         = 2019,
	booktitle    = { XXXIII Brazilian Symposium on Software Engineering},
	location     = {Salvador, Brazil},
	publisher    = {ACM},
	
	series       = {SBES '19},
	pages        = {437–446},
	doi          = {10.1145/3350768.3352490},
	isbn         = 9781450376518,
	url          = {https://doi-org.ezproxy.elib10.ub.unimaas.nl/10.1145/3350768.3352490},
	abstract     = {Refactoring is the process of transforming the internal structure of existing code without changing its observable behavior. Many studies have shown that refactoring increases program maintainability and understandability. Due to these benefits, refactoring is recognized as a best practice in the software development community. However, prior to refactoring activities, developers need to look for refactoring opportunities, i.e., developers need to be able to identify code smells, which essentially are instances of poor design and ill-considered implementation choices that may hinder code maintainability and understandability. However, code smell identification is overlooked in the Computer Science curriculum. Recently, Software Engineering educators have started exploring gamification, which entails using game elements in non-game contexts, to improve instructional outcomes in educational settings. The potential of gamification lies in supporting and motivating students, enhancing the learning process and its outcomes. We set out to evaluate the extent to which such claim is valid in the context of post-training reinforcement. To this end, we devised and implemented CleanGame, which is a gamified tool that covers one important aspect of the refactoring curriculum: code smell identification. We also carried out an experiment involving eighteen participants to probe into the effectiveness of gamification in the context of post-training reinforcement. We found that, on average, participants managed to identify twice as much code smells during learning reinforcement with a gamified approach in comparison to a non-gamified approach. Moreover, we administered a post-experiment attitudinal survey to the participants. According to the results of such survey, most participants showed a positive attitude towards CleanGame.},
	numpages     = 10,
	keywords     = {code smell, post-training reinforcement, Software Engineering education, Refactoring, gamification}
}
@inproceedings{10.1145/3613372.3614193,
	title        = {Gamification in Software Engineering Education: A Tertiary Study},
	author       = {Tonh\~{a}o, Simone and Shigenaga, Marcelo and Herculani, Julio and Medeiros, Andressa and Amaral, Aline and Silva, Williamson and Colanzi, Thelma and Steinmacher, Igor},
	year         = 2023,
	booktitle    = { XXXVII Brazilian Symposium on Software Engineering},
	location     = {Campo Grande, Brazil},
	publisher    = {ACM},
	
	series       = {SBES '23},
	pages        = {358–367},
	doi          = {10.1145/3613372.3614193},
	isbn         = 9798400707872,
	url          = {https://doi-org.ezproxy.elib10.ub.unimaas.nl/10.1145/3613372.3614193},
	abstract     = {As the significance of Software Engineering (SE) professionals continues to grow in the industry, the adoption of gamification techniques for training purposes has gained traction due to its potential to enhance class appeal through game-derived elements. This paper presents a tertiary study investigating the application of gamification in Software Engineering (SE) education. The study was conducted in response to recent systematic literature reviews and mappings on the topic. The findings reveal that the areas of SE most frequently gamified are Software Testing and Software Quality, with competition and cooperation being the most commonly utilized gamification elements. Additionally, the majority of studies focus on structural gamification, where game elements are employed to modify the learning environment without altering the content. The results demonstrate the potential of gamification to improve students' engagement and motivation throughout the SE learning process, while also impacting other aspects such as performance improvement, skill development, and fostering good SE practices. However, caution is advised as unplanned and incorrectly applied gamification measures may lead to significant declines in performance and motivation.},
	numpages     = 10,
	keywords     = {Gamification, Tertiary Study, Software Engineering Education}
}
@inproceedings{10.1145/3613372.3614191,
	title        = {Testing Maze: An Educational Game for Teaching Functional Testing},
	author       = {Severo, Jan and Lelli, Val\'{e}ria},
	year         = 2023,
	booktitle    = { XXXVII Brazilian Symposium on Software Engineering},
	location     = {Campo Grande, Brazil},
	publisher    = {ACM},
	
	series       = {SBES '23},
	pages        = {407–415},
	doi          = {10.1145/3613372.3614191},
	isbn         = 9798400707872,
	url          = {https://doi-org.ezproxy.elib10.ub.unimaas.nl/10.1145/3613372.3614191},
	abstract     = {Software testing is a fundamental process to increase software reliability. However, teaching software testing using traditional theoretical classes might be discouraging due to the lack of dynamism and practical activities. To solve this problem, methodologies which encourage the students' participation in a more active way can be used in the classroom. Therefore, from this perspective, approaches involving educational games are increasingly used in undergraduate courses to engage students and facilitate learning. Functional testing is a type of software testing based on the functional requirements of the system, which means a certain functionality is tested without need to access the source code. In this context, this work proposes Testing Maze, an educational puzzle game for teaching functional testing concepts and test specifications containing a fantasy narrative. The game was applied with 31 undergraduate students from the Federal University of Cear\'{a} in the Verification, Validation and Software Testing course. The game validation process took place over two stages during two semesters involving 3 different groups of students. In each stage a different version of the game was applied, in the first one a prototype was applied with 14 students and in the second stage a second version of the game containing improvements was applied with 17 students divided into two groups. At the end of each activity, students answered an online questionnaire to evaluate the Testing Maze. At the end of the evaluation, all questionnaire's questions obtained a majority of favorable responses to the game. Regarding the second version, 14 students considered that Testing Maze helped to understand the concept of functional testing, representing an approval of 82.3\% for this version.},
	numpages     = 9,
	keywords     = {functional testing, educational game, teaching}
}
@inproceedings{10.1145/3430665.3456352,
	title        = {Teaching Testing with Modern Technology Stacks in Undergraduate Software Engineering Courses},
	author       = {Chow, Scott P. and Komarlu, Tanay and Conrad, Phillip T.},
	year         = 2021,
	booktitle    = {26th Annual Conference on Innovation and Technology in Computer Science Education},
	location     = {Virtual Event, Germany},
	publisher    = {ACM},
	
	series       = {ITiCSE '21},
	pages        = {241–247},
	doi          = {10.1145/3430665.3456352},
	isbn         = 9781450382144,
	url          = {https://doi-org.ezproxy.elib10.ub.unimaas.nl/10.1145/3430665.3456352},
	abstract     = {Students' experience with software testing in undergraduate computing courses is often relatively shallow, as compared to the importance of the topic. This experience report describes introducing industrial-strength testing into CMPSC 156, an upper division course in software engineering at UC Santa Barbara. We describe our efforts to modify our software engineering course to introduce rigorous test-coverage requirements into full-stack web development projects, requirements similar to those the authors had experienced in a professional software development setting. We present student feedback on the course and coverage metrics for the projects. We reflect on what about these changes worked (or didn't), and provide suggestions for other instructors that would like to give their students a deeper experience with software testing in their software engineering courses.},
	numpages     = 7,
	keywords     = {computer science education, continuous integration, unit testing, web applications, integration testing, test coverage, software engineering education, testing}
}
@inproceedings{10.1145/3629479.3629480,
	title        = {Scrum in Practice: City Reconstruction as a Pedagogical Game Challenge},
	author       = {Masson, Eloisa Toffano Seidel and Calazans, Angelica Toffano S. and Bandeira, Ian Nery and Silva, Geovana Ramos Sousa and Canedo, Edna Dias},
	year         = 2023,
	booktitle    = { XXII Brazilian Symposium on Software Quality},
	location     = {Bras\'{\i}lia, Brazil},
	publisher    = {ACM},
	
	series       = {SBQS '23},
	pages        = {321–331},
	doi          = {10.1145/3629479.3629480},
	isbn         = 9798400707865,
	url          = {https://doi-org.ezproxy.elib10.ub.unimaas.nl/10.1145/3629479.3629480},
	abstract     = {This paper presents an experience report on the dynamics of the Scrum Game Challenge through the customization of LEGO4Scrum. The game's objective is to teach Scrum concepts through the simulation of the reconstruction of a city of Mariana, Minas Gerais, exploring the use of Scrum and experimenting with tools used by the software industry. As a result, we present the customizations performed, as well as the students' and teachers' perceptions of the advantages and disadvantages of applying the practice of the dynamic in the classroom. Our findings reveal that most students felt that the concepts covered in the dynamics could be applied during their professional practice as software developers in the industry. Moreover, the dynamic allowed them to understand how the application of Scrum works during the software development process in a clear, easy, and fun way. The students and teachers also stated that besides theoretical knowledge, it is essential to consider practical knowledge about the application of agile software development methodologies during Computer Science coursework.},
	numpages     = 11,
	keywords     = {Knowledge Sharing, Teaching in Higher Education, Teaching innovation}
}
@inproceedings{10.1145/3510456.3514139,
	title        = {Putting Security on the Table: The Digitalisation of Security Tabletop Games and Its Challenging Aftertaste},
	author       = {Gutfleisch, Marco and Sch\"{o}ps, Markus and Sayin, Sibel and Wende, Frederic and Sasse, Martina Angela},
	year         = 2022,
	booktitle    = { ACM/IEEE 44th International Conference on Software Engineering: Software Engineering Education and Training},
	location     = {Pittsburgh, Pennsylvania},
	publisher    = {ACM},
	
	series       = {ICSE-SEET '22},
	pages        = {217–222},
	doi          = {10.1145/3510456.3514139},
	isbn         = 9781450392259,
	url          = {https://doi-org.ezproxy.elib10.ub.unimaas.nl/10.1145/3510456.3514139},
	abstract     = {IT-Security Tabletop Games for developers have been available in analog format; with the COVID-19 pandemic, interest in collaborative remote security games has increased. In this paper, we propose a methodology to evaluate the impact of a (remote) security game-based intervention on developers. The study design consists of the respective intervention, three questionnaires, and a small open interview guide for a focus group. A validated self-efficacy scale is used as a proxy for measuring effects on participants' ability to develop secure software. We tested this design with 9 participants (expert and novice developers and security experts) as part of a small feasibility study to understand the challenges and limitations of remote tabletop games. We describe how we selected and digitalised three security tabletop games, and report the qualitative findings from our evaluation. Setting up and running the virtual tabletop games turned out to be more challenging and complex for both moderator and participants than we expected. Completing the games required patience and persistence, and social interaction was limited. Our findings can be helpful in building and evaluating a better, more comprehensive, technically sound and issue-specific game-based training measure for developers. The methodology can be used by researchers to evaluate existing and new game designs.},
	numpages     = 6,
	keywords     = {software engineering, serious games, security, developer education}
}
%%% END of ACM1 results


%%% IEEE1 results
@inproceedings{9637426,
	title        = {Remote teaching and learning of software testing using active methodologies in the COVID-19 pandemic context},
	author       = {I. Elgrably and S. Oliveira},
	year         = 2021,
	
	booktitle    = {Frontiers in Education Conference (FIE)},
	publisher    = {IEEE},
	
	volume       = {},
	pages        = {1--9},
	doi          = {10.1109/FIE49875.2021.9637426},
	issn         = {},
	url          = {https://doi-ieeecomputersociety-org.ezproxy.elib10.ub.unimaas.nl/10.1109/FIE49875.2021.9637426},
	abstract     = {This Research for the Practice of Full Paper shows that in the face of the COVID-19 pandemic, the immense challenge of continuing the teaching-learning process without face-to-face classes arose. This required a rapid shift to distance education in order to enable continuity of university activities. Distance education still needs the help of other factors, as some subjects, for example software testing, may need other forms of active approaches and methodologies to make their teaching and learning process more efficient. In teaching some computer science subjects, there is a need for learning through the application of practical activities. The use of distance learning entails an even greater aggravation of this need, given the numerous limitations that exist in this modality, requiring good planning and rigorous monitoring before, during and after classes. Thus, this paper aims to identify and discuss the findings, good practices, recommendations and perceptions used in a software testing subject, in addition to analyzing the motivations and perceptions of students in a distance learning environment.},
	keywords     = {software testing;covid-19;computer science;computer aided instruction;pandemics;education;software}
}
@inproceedings{9155973,
	title        = {Teaching Software Testing with the Code Defenders Testing Game: Experiences and Improvements},
	author       = {G. Fraser and A. Gambi and J. Rojas},
	year         = 2020,
	
	booktitle    = { International Conference on Software Testing, Verification and Validation Workshops (ICSTW)},
	publisher    = {IEEE },
	
	volume       = {},
	pages        = {461--464},
	doi          = {10.1109/ICSTW50294.2020.00082},
	issn         = {},
	url          = {https://doi-ieeecomputersociety-org.ezproxy.elib10.ub.unimaas.nl/10.1109/ICSTW50294.2020.00082},
	abstract     = {Code Defenders is a game that aims to engage students with software testing. Players compete over a Java class under test by producing tests and mutants, i.e., artificial faults, scoring points if tests reveal mutants, or mutants survive tests. While initially created as a fun way to introduce students to testing in one-off fun sessions, we have moved to integrating the game as an assessed core component of a software testing course. This has shown great potential in engaging students, but many challenges have been revealed as part of this integration. In this paper we describe how we integrated Code Defenders into a software testing course, and how we improved the game in order to address the resulting challenges.},
	keywords     = {games;software testing;java;monitoring;writing;correlation}
}
@inproceedings{8658524,
	title        = {Games and Gamification in Software Engineering Education: A Survey with Educators},
	author       = {P. Rodrigues and M. Souza and E. Figueiredo},
	year         = 2018,
	booktitle    = {Frontiers in Education Conference (FIE)},
	publisher    = {IEEE },
	volume       = {},
	pages        = {1--9},
	doi          = {10.1109/FIE.2018.8658524},
	issn         = {},
	url          = {https://doi-ieeecomputersociety-org.ezproxy.elib10.ub.unimaas.nl/10.1109/FIE.2018.8658524},
	abstract     = {The use of games and game elements in software engineering education is not new. In fact, their use in Software Engineering education is found in research papers since 1974, with a notorious increase after 2000. However, there is little information about the actual adoption of these approaches in software engineering education. Therefore, the goal of this paper is to investigate the use of games and game elements in software engineering education, in the perspective of educators. To achieve this goal, this study proposes and analyzes the results of a survey answered by 88 software engineering professors. We sample the participants by inviting 285 educators mined from one hundred well-stablished universities and educational institutions of different regions of Brazil. The goal of the survey is (i) to collect information about the use of games and gamification in classrooms and (ii) to understand the relation of ACM/IEEE knowledge areas and the used game-related methods. The results show that most of the professors are aware of these educational approaches, the games were adopted by only 21 participants and game elements were only adopted by 19 participants. Games are most used to cover ``Software Process'' and ``Project Management''. The most used game elements are Points, Quizzes, and Challenges. The results also show that the main reasons for not adopting the resources are the lack of knowledge, lack of information about relevant games for teaching software engineering, and the lack of time to plan and include these approaches in the classroom. Finally, results show a positive tendency towards the future adoption of these game-related approaches by the software engineering professors.},
	keywords     = {software engineering;games;education;software;tools;computer science;knowledge engineering}
}
@inproceedings{8802503,
	title        = {How Could Serious Games Support Secure Programming? Designing a Study Replication and Intervention},
	author       = {M. Maarek and L. McGregor and S. Louchart and R. McMenemy},
	year         = 2019,

	booktitle    = { European Symposium on Security and Privacy Workshops (EuroS\&PW)},
	publisher    = {IEEE},
	
	volume       = {},
	pages        = {139--148},
	doi          = {10.1109/EuroSPW.2019.00022},
	issn         = {},
	url          = {https://doi-ieeecomputersociety-org.ezproxy.elib10.ub.unimaas.nl/10.1109/EuroSPW.2019.00022},
	abstract     = {While developing and deploying software continue to be more broadly accessible, so is the problem caused by these systems\&\#x27; security not being considered enough by their developers and maintainers. We propose to address this developer-centred security issue with serious games (games for which entertainment is not the main purpose) as a means to motivate developers to consider security threats when developing. We have developed a serious game around secure and non-secure programming exercises to investigate if serious gamification helps to improve attitudes or ability with secure programming. We detail the design choices of the game and how it relates to the programming tasks. In particular we present the design choices we made with the intention to replicate a prior study and discuss the tension that arose between replication and intervention. We discuss the results of a pilot study we conducted and present the steps we plan to take going forward into larger studies.},
	keywords     = {}
}
@inproceedings{9637199,
	title        = {Exploring the Impact of Non-conventional Gamification Elements on Student Motivation and Engagement},
	author       = {D. Dicheva and C. Dichev and L. Cassel and B. Guy and K. Irwin},
	year         = 2021,

	booktitle    = { Frontiers in Education Conference (FIE)},
	publisher    = {IEEE},
	
	volume       = {},
	pages        = {1--9},
	doi          = {10.1109/FIE49875.2021.9637199},
	issn         = {},
	url          = {https://doi-ieeecomputersociety-org.ezproxy.elib10.ub.unimaas.nl/10.1109/FIE49875.2021.9637199},
	abstract     = {This Full Paper in the Research-to-Practice track builds on research in gamification of instruction. A primary objective of gamifying learning is to encourage and sustain students\&\#x27; engagement in activities by making them more gamelike. However, it is still unclear what structures borrowed from games could afford such a ``game-like'' experience and in what contexts. Embedding classmates\&\#x27; duels in learning settings seems a promising gamification strategy for exploration due to its potential of increasing motivation and engagement through a ``game-like'' experience. Similar effects are expected from using virtual currency, another design element popular in video games. Accordingly, the goal of this study is to empirically investigate whether the incorporation of dueling leads to increased interest in out-of-class practicing. In addition, we were interested in investigating to what an extent adding virtual currency can boost students\&\#x27; interest in dueling. An introductory class in Python programming served as the experimental environment. Unlike most studies in which the control group works in a non-gamified condition and the experimental group works in a gamified condition, this experiment uses a different approach. We investigated the impact on learners\&\#x27; engagement of adding duels to an ongoing gamified activity. Engagement indicators were measured and logged throughout the semester while student motivation was examined through surveys. The opportunity to challenge classmates appeared after the first exam (around one-third of the semester) and continued for the remaining two thirds of the class time. Thus, the same students in the new condition served as the experimental group. After the third exam, we added virtual currency. Students were able to earn virtual currency by issuing and responding to duel requests as well as by doing extra practice. This had a noticeable effect on the use of dueling. The empirical results of the study show that overall, for this group of students, adding duels alone had no positive effect on students\&\#x27; engagement with the gamified practicing system. However, evidence from the survey suggests that the studied combination of gamification elements (points, badges, leaderboard, avatars, duels, and virtual currency) did increase student intrinsic motivation.},
	keywords     = {online banking;avatars;conferences;education;games;programming;python}
}
@inproceedings{8994972,
	title        = {Towards a Gamified Tool to Improve Unit Test Teaching},
	author       = {M. Marabesi and I. Frango Silveira},
	year         = 2019,
	
	booktitle    = {2019 XIV Latin American Conference on Learning Technologies (LACLO)},
	publisher    = {IEEE},
	
	volume       = {},
	pages        = {12--19},
	doi          = {10.1109/LACLO49268.2019.00013},
	issn         = {},
	url          = {https://doi-ieeecomputersociety-org.ezproxy.elib10.ub.unimaas.nl/10.1109/LACLO49268.2019.00013},
	abstract     = {Due the constant evolution of software development and its growing complexity, more is being required from professionals to master different phases of the software development process, which includes the testing phase. This has an impact on the training of new professionals, since the undergraduate curricula is supposed to address this complexity. In this sense, software testing has its place in undergraduate CS-related courses, still the literature points out that the needed attention and importance is not given by the students and even by academic curricula. One of the possible causes that can be mentioned is the way of offering this content, which is usually part of a Software Engineering introductory course, perceived by students as something tedious and not important for their career. Thinking about this scenario, this paper describes the design and implementation of Testable.},
	keywords     = {}
}
@inproceedings{9787968,
	title        = {Gamified Exploratory GUI Testing of Web Applications: a Preliminary Evaluation},
	author       = {T. Fulcini and L. Ardito},
	year         = 2022,
	
	booktitle    = {International Conference on Software Testing, Verification and Validation Workshops (ICSTW)},
	publisher    = {IEEE},
	
	volume       = {},
	pages        = {215--222},
	doi          = {10.1109/ICSTW55395.2022.00045},
	issn         = {2159-4848},
	url          = {https://doi-ieeecomputersociety-org.ezproxy.elib10.ub.unimaas.nl/10.1109/ICSTW55395.2022.00045},
	abstract     = {In the context of Software Engineering, testing is a well-known phase that plays a critical role, as is needed to ensure that the designed and produced code provides the expected results, avoiding faults and crashes. Exploratory GUI testing allows the tester to manually define test cases by directly interacting with the user interface of the finite system. However, testers often loosely perform exploratory GUI testing, as they perceive it as a time-consuming, repetitive and unappealing activity. We defined a gamified framework for GUI testing to address this issue, which we developed and integrated into the Augmented testing tool, Scout. Gamification is perceived as a means to enhance the performance of human testers by stimulating competition and encouraging them to achieve better results in terms of both efficiency and effectiveness. We performed a preliminary evaluation of the gamification layer with a small sample of testers to assess the benefits of the technique compared with the standard version of the same tool. Test sequences defined with the gamified tool achieved higher coverage (i.e., higher efficiency) and a slightly higher percentage of bugs found. The user's opinion was almost unanimously in favor of the gamified version of the tool.},
	keywords     = {software testing;codes;conferences;computer bugs;standards;testing;graphical user interfaces}
}
@inproceedings{10063754,
	title        = {Application of ``Design Thinking'' in the Development of Virtual Platforms with Gamified Elements},
	author       = {D. Zurita-Gaibor and M. Escobar-Sanchez and X. Lopez-Chico},
	year         = 2022,

	booktitle    = {3rd International Conference on Information Systems and Software Technologies (ICI2ST)},
	publisher    = {IEEE},
	
	volume       = {},
	pages        = {122--129},
	doi          = {10.1109/ICI2ST57350.2022.00025},
	issn         = {},
	url          = {https://doi-ieeecomputersociety-org.ezproxy.elib10.ub.unimaas.nl/10.1109/ICI2ST57350.2022.00025},
	abstract     = {This article presents the development of a virtual platform with the Design Thinking methodology and gamified elements, to strengthen the teaching-learning process in the teachers of the Gonz\'{a}lez Su\'{a}rez Educational Unit. This research arises from the need of a virtual platform with gamified elements that are free, easy to use, interactive and motivational. In this study user stories with the agile POV format, test cases to verify the functionality and abuse cases for robustness and to prevent the vulnerability of the virtual platform are used, as well as a b-Learning approach for testing in the classroom. Obtaining in the end as significant results a high and satisfactory assessment of the use of the virtual platform.},
	keywords     = {design methodology;software;robustness;testing;information systems}
}
@inproceedings{9463296,
	title        = {Gamification in Software Engineering: A literature Review},
	author       = {C. Barreto and C. Franca},
	year         = 2021,
	
	booktitle    = { IEEE/ACM 13th International Workshop on Cooperative and Human Aspects of Software Engineering (CHASE)},
	publisher    = {IEEE},
	
	volume       = {},
	pages        = {105--108},
	doi          = {10.1109/CHASE52884.2021.00020},
	issn         = {},
	url          = {https://doi-ieeecomputersociety-org.ezproxy.elib10.ub.unimaas.nl/10.1109/CHASE52884.2021.00020},
	abstract     = {Given the impact of people motivation on software engineering, it is no surprise to see that gamification techniques have been studied and applied to the field. A relevant number of studies have been reported on the subject, and different understandings of the technique are around. However, it is not clear what gamification brings to industrial software development settings. This paper intends to map the state of the art on the use and understanding of gamification in industrial software development. We aim to review the definitions of gamification adopted in software engineering studies, identify the elements of games that are used to motivate software engineers, and map the specific areas of software engineering that have been addressed so far. For that end, we conducted a mixed method literature review, covering 130 studies. From such review, we found that (1) researchers in the field tend towards a strict view of gamification, (2) the practical results of gamification are unclear and polemic, and (3) this research area has still much to improve.},
	keywords     = {bibliographies;conferences;games;software;software engineering}
}
@inproceedings{8719454,
	title        = {Applying Gamification and Posing to Software Development},
	author       = {M. Tsunoda and H. Yumoto},
	year         = 2018,
	
	booktitle    = {25th Asia-Pacific Software Engineering Conference (APSEC)},
	publisher    = {IEEE},
	
	volume       = {},
	pages        = {638--642},
	doi          = {10.1109/APSEC.2018.00081},
	issn         = {},
	url          = {https://doi-ieeecomputersociety-org.ezproxy.elib10.ub.unimaas.nl/10.1109/APSEC.2018.00081},
	abstract     = {Background: The influence of each developer\&\#x27;s performance on a project\&\#x27;s results (e.g., total software development effort) cannot be ignored. To enhance the performance of each developer, there are various approaches such as improving software engineering education and creating development support tools. In this study, we selected gamification and posing (power posing) and evaluated the effects of these approaches on coding. They are expected to improve the mental state and the motivation of developers. Aim: Select which method (gamification or posing) should be used to enhance developers\&\#x27; work efficiency. Method: Subjects created programs based on given specifications. Group A (Gamification was applied to a task) and group B (Posing was applied to a task) were made. We evaluated the coding time of each group. Results: Gamification was more effective than posing for reducing coding time.},
	keywords     = {task analysis;encoding;software;psychology;biochemistry;informatics;software engineering}
}
@inproceedings{9274194,
	title        = {A teaching proposal for the software measurement process using gamification: an experimental study},
	author       = {L. Furtado and S. Ronaldo Bezerra Oliveira},
	year         = 2020,
	
	booktitle    = {Frontiers in Education Conference (FIE)},
	publisher    = {IEEE},
	
	volume       = {},
	pages        = {1--8},
	doi          = {10.1109/FIE44824.2020.9274194},
	issn         = {},
	url          = {https://doi-ieeecomputersociety-org.ezproxy.elib10.ub.unimaas.nl/10.1109/FIE44824.2020.9274194},
	abstract     = {This Research to Practice Full Paper presents a proposal to teach the software measurement process from a gamification class that makes use of games elements and serious game. This class aims to encourage interaction in the classroom and thereby foster interest in the process. In addition, the proposal was applied in two classes with a total of 22 students from a Federal University in Brazil. As a result, one of the experiments yielded a level of 80\% of the evaluations with positive criteria for the class using the gamification. Finally, the gamification had a positive effect on those involved when it is not only the use of game elements in a non-gaming context, but it is the intelligent use of this concept. In conclusion, the proposal helped in the teaching process of software measurement from the creation of a competitive and collaborative environment with the core in classroom interactions.},
	keywords     = {software measurement;games;education;software;proposals;measurement;tools}
}
%%% END OF IEEE1 results
@article{1646911,
	title        = {Hints on Test Data Selection: Help for the Practicing Programmer},
	author       = {DeMillo, R.A. and Lipton, R.J. and Sayward, F.G.},
	year         = 1978,
	journal      = {Computer},
	volume       = 11,
	number       = 4,
	pages        = {34--41},
	doi          = {10.1109/C-M.1978.218136}
}
@misc{BibEntry2024Jan,
	title        = {{TestSphere}},
	year         = 2024,
	month        = jan,
	journal      = {Ministry of Testing},
	url          = {https://www.ministryoftesting.com/testsphere},
	note         = {[Online; accessed 5. Jan. 2024]}
}
@misc{BibEntry2023Sep,
	title        = {{Would Heu-Risk It?}},
	year         = 2023,
	month        = sep,
	url          = {https://pejgan.se/wouldheu-riskit.html},
	note         = {[Online; accessed 5. Jan. 2024]}
}
@article{ChrisKenst2022Jun,
	title        = {{The TestOpsy}},
	author       = {{Chris Kenst}},
	year         = 2022,
	month        = jun,
	journal      = {Chris Kenst},
	publisher    = {Chris Kenst},
	url          = {https://www.kenst.com/the-testopsy}
}
@misc{BibEntry2022Feb,
	title        = {{Black Box Puzzles}},
	year         = 2022,
	month        = feb,
	url          = {https://blackboxpuzzles.workroomprds.com},
	note         = {[Online; accessed 5. Jan. 2024]}
}
@article{NOROOZI2020100369,
	title        = {A systematic review on the impacts of game-based learning on argumentation skills},
	author       = {Omid Noroozi and Hojjat Dehghanzadeh and Ebrahim Talaee},
	year         = 2020,
	journal      = {Entertainment Computing},
	volume       = 35,
	pages        = 100369,
	doi          = {https://doi.org/10.1016/j.entcom.2020.100369},
	issn         = {1875-9521},
	url          = {https://www.sciencedirect.com/science/article/pii/S187595212030077X},
	keywords     = {Argumentation, Game-based learning, Instructional support, Learning outcomes},
	abstract     = {This study maps instructional support and learning outcomes of argumentation game-based learning. For this systematic review, 29 publications dating from 2000 through 2019 were studied to highlight the foci of this field of research. Although these studies reported effects of game-based learning on learning outcomes and instructional supports on argumentation skills, none of the publications reported specific instructional support and game elements associated with the learning outcomes. Modeling, reflection and feedback were the most commonly reported instructional support of argumentation game-based learning. Feedback, challenge, and collaboration were the most commonly reported game elements of argumentation game-based learning. In addition, high level of argumentation skills and engagement were the most commonly reported positive learning outcomes of argumentation game-based learning. The results of this study provide suggestions on how to design argumentation game-based learning.}
}
@article{garousi2020software,
	title        = {Software-testing education: A systematic literature mapping},
	author       = {Garousi, Vahid and Rainer, Austen and Lauv{\aa}s Jr, Per and Arcuri, Andrea},
	year         = 2020,
	journal      = {Journal of Systems and Software},
	publisher    = {Elsevier},
	volume       = 165,
	pages        = 110570
}
@inproceedings{scatalon2020teaching,
	title        = {Teaching practices of software testing in programming education},
	author       = {Scatalon, Lilian Passos and Garcia, Rog{\'e}rio Eduardo and Barbosa, Ellen Francine},
	year         = 2020,
	booktitle    = {Frontiers in Education Conference (FIE)},
 
	pages        = {1--9},
	organization = {IEEE}
}
@inproceedings{doorn2021exploring,
	title        = {Exploring students' sensemaking of test case design. An initial study},
	author       = {Doorn, Niels and Vos, Tanja EJ and Mar{\'\i}n, Beatriz and Passier, Harrie and Bijlsma, Lex and Cacace, Silvio},
	year         = 2021,
	booktitle    = {21st International Conference on Software Quality, Reliability and Security Companion (QRS-C)},
	pages        = {1069--1078},
	organization = {IEEE}
}
@article{doorn2023towards,
	title        = {Towards understanding students' sensemaking of test case design},
	author       = {Doorn, Niels and Vos, Tanja EJ and Mar{\'\i}n, Beatriz},
	year         = 2023,
	journal      = {Data \& Knowledge Engineering},
	publisher    = {Elsevier},
	pages        = 102199
}
@inproceedings{deterding2011game,
	title        = {From game design elements to gamefulness: defining" gamification"},
	author       = {Deterding, Sebastian and Dixon, Dan and Khaled, Rilla and Nacke, Lennart},
	year         = 2011,
	booktitle    = { 15th international academic MindTrek conference: Envisioning future media environments},
	pages        = {9--15}
}
@article{dicheva2015gamification,
	title        = {Gamification in education: A systematic mapping study},
	author       = {Dicheva, Darina and Dichev, Christo and Agre, Gennady and Angelova, Galia},
	year         = 2015,
	journal      = {Journal of educational technology \& society},
	publisher    = {JSTOR},
	volume       = 18,
	number       = 3,
	pages        = {75--88}
}
@inproceedings{de2014systematic,
	title        = {A systematic mapping on gamification applied to education},
	author       = {de Sousa Borges, Simone and Durelli, Vinicius HS and Reis, Helena Macedo and Isotani, Seiji},
	year         = 2014,
	booktitle    = {29th annual ACM symposium on applied computing},
	pages        = {216--222}
}
@inproceedings{caponetto2014gamification,
	title        = {Gamification and education: A literature review},
	author       = {Caponetto, Ilaria and Earp, Jeffrey and Ott, Michela},
	year         = 2014,
	booktitle    = {European Conference on Games Based Learning},
	volume       = 1,
	pages        = 50,
	organization = {Academic Conferences International Limited}
}
@inproceedings{vargas2015analisis,
	title        = {An{\'a}lisis de uso de la Gamificaci{\'o}n en la Ense{\~n}anza de la Inform{\'a}tica},
	author       = {Vargas-Enr{\'\i}quez, Juan and Garc{\'\i}a-Mundo, Lilia and Genero, Marcela and Piattini, Mario},
	year         = 2015,
	booktitle    = {XXI Jornadas de la Ense{\~n}anza Universitaria de la Inform{\'a}tica},
	pages        = {105--112},
	organization = {Univ. Oberta La Salle}
}
@incollection{marin2022lessons,
	title        = {Lessons learned about gamification in software engineering education},
	author       = {Mar{\'\i}n, Beatriz},
	year         = 2022,
	booktitle    = {Research Anthology on Developments in Gamification and Game-Based Learning},
	publisher    = {IGI Global},
	pages        = {1473--1496}
}
@inproceedings{marin2023gamification,
	title        = {Gamification to Ignite Learning in Modern Times (Keynote)},
	author       = {Mar{\'\i}n, Beatriz},
	year         = 2023,
	booktitle    = {2nd International Workshop on Gamification in Software Development, Verification, and Validation (GAMIFY)},
	pages        = {1--1}
}
@article{kitchenham2011using,
	title        = {Using mapping studies as the basis for further research--a participant-observer case study},
	author       = {Kitchenham, Barbara A and Budgen, David and Brereton, O Pearl},
	year         = 2011,
	journal      = {Information and Software Technology},
	publisher    = {Elsevier},
	volume       = 53,
	number       = 6,
	pages        = {638--651}
}
@book{paul2019thinker,
	title        = {The thinker's guide to Socratic questioning},
	author       = {Paul, Richard and Elder, Linda},
	year         = 2019,
	publisher    = {Rowman \& Littlefield}
}
@article{lepper1988motivational,
	title        = {Motivational considerations in the study of instruction},
	author       = {Lepper, Mark R},
	year         = 1988,
	journal      = {Cognition and instruction},
	publisher    = {JSTOR},
	volume       = 5,
	number       = 4,
	pages        = {289--309}
}
@incollection{malone2021making,
	title        = {Making learning fun: A taxonomy of intrinsic motivations for learning},
	author       = {Malone, Thomas W and Lepper, Mark R},
	year         = 2021,
	booktitle    = {Aptitude, learning, and instruction},
	publisher    = {Routledge},
	pages        = {223--254}
}
@misc{BibEntry2023Jul,
	title        = {{Fluxx}},
	year         = 2023,
	month        = jul,
	journal      = {Looney Labs},
	url          = {https://www.looneylabs.com/games/fluxx},
	note         = {[Online; accessed 10. Jan. 2024]}
}
@article{marin2023enactest,
	title        = {ENACTEST project-European Innovation Alliance for Testing Education},
	author       = {Mar{\'\i}n, Beatriz and Vos, Tanja E J and Snoeck, Monique and Paiva, Ana C and Fasolino, Anna Rita},
    journal      = {CAiSE Research Projects Exhibition},
    pages ={91-96},
	year         = 2023
}
@article{BAI2020100322,
	title        = {Does gamification improve student learning outcome? Evidence from a meta-analysis and synthesis of qualitative data in educational contexts},
	author       = {Shurui Bai and Khe Foon Hew and Biyun Huang},
	year         = 2020,
	journal      = {Educational Research Review},
	volume       = 30,
	pages        = 100322,
	doi          = {https://doi.org/10.1016/j.edurev.2020.100322},
	issn         = {1747-938X},
	url          = {https://www.sciencedirect.com/science/article/pii/S1747938X19302908},
	abstract     = {Despite the buzz around gamification as an exciting new method to engage students, evidence of its ability to enhance learning is mixed. In fact, gamification has attracted considerable controversy (``gamification is bullshit'') and some derogatory labels such as ``exploitationware.'' Therefore, in order to make the case for or against gamification in education, it is important to examine the effects (if any) of gamification on student learning achievements. This study is a meta-analysis of 30 independent interventions (3,202 participants) drawn from 24 quantitative studies that have examined the effects of gamification on student academic performance in various educational settings. The results show an overall significant medium effect size in favor of gamification over learning without gamification (Hedges' g~=~0.504, 95\% CI [0.284–0.723], p~<~0.001). No publication bias is detected. An analysis of 32 qualitative studies reveals four reasons for learners' enjoyment of gamification: (a) gamification can foster enthusiasm; (b) gamification can provide feedback on performance; (c) gamification can fulfill learners' needs for recognition; and (d) gamification can promote goal setting, and two reasons for their dislike of gamification: (a) gamification does not bring additional utility and (b) gamification can cause anxiety or jealousy. We conclude by highlighting two unresolved questions, and suggesting several future research directions concerning gamification in educational contexts.}
}
@article{informatics9040075,
	title        = {Exploring Immersive Learning Experiences: A Survey},
	author       = {Kuhail, Mohammad Amin and ElSayary, Areej and Farooq, Shahbano and Alghamdi, Ahlam},
	year         = 2022,
	journal      = {Informatics},
	volume       = 9,
	number       = 4,
	doi          = {10.3390/informatics9040075},
	issn         = {2227-9709},
	url          = {https://www.mdpi.com/2227-9709/9/4/75},
	article-number = 75,
	abstract     = {Immersive technologies have been shown to significantly improve learning as they can simplify and simulate complicated concepts in various fields. However, there is a lack of studies that analyze the recent evidence-based immersive learning experiences applied in a classroom setting or offered to the public. This study presents a systematic review of 42 papers to understand, compare, and reflect on recent attempts to integrate immersive technologies in education using seven dimensions: application field, the technology used, educational role, interaction techniques, evaluation methods, and challenges. The results show that most studies covered STEM (science, technology, engineering, math) topics and mostly used head-mounted display (HMD) virtual reality in addition to marker-based augmented reality, while mixed reality was only represented in two studies. Further, the studies mostly used a form of active learning, and highlighted touch and hardware-based interactions enabling viewpoint and select tasks. Moreover, the studies utilized experiments, questionnaires, and evaluation studies for evaluating the immersive experiences. The evaluations show improved performance and engagement, but also point to various usability issues. Finally, we discuss implications and future research directions, and compare our findings with related review studies.}
}
@article{hirsh2022,
	title        = {Reviews of teaching methods – which fundamental issues are identified?},
	author       = {Hirsh, Asa and Nilhom, Claes and Roman, Henrik and Forsberg, Eva and Sundberg, Daniel},
	year         = 2022,
	journal      = {Education Inquiry},
	publisher    = {Routledge},
	volume       = 13,
	number       = 1,
	pages        = {1--20},
	doi          = {10.1080/20004508.2020.1839232},
	url          = {https://doi.org/10.1080/20004508.2020.1839232},
	eprint       = {https://doi.org/10.1080/20004508.2020.1839232}
}
@article{Tan_Chong_2023,
	title        = {Unlocking the potential of game-based learning for soft skills development: A comprehensive review},
	author       = {Tan, Bee Sian and Chong, Kim Soon},
	year         = 2023,
	month        = {Dec.},
	journal      = {Journal of ICT in Education},
	volume       = 10,
	number       = 2,
	pages        = {29–54},
	doi          = {10.37134/jictie.vol10.2.3.2023},
	url          = {https://ojs.upsi.edu.my/index.php/JICTIE/article/view/8725}
}
@misc{BibEntry2020Apr,
	title = {{Risk-storming}},
	year = {2020},
	month = apr,
	note = {[Online; accessed 13. Jan. 2024]},
	url = {https://riskstorming.com}
}
@article{ScharonHarding2024Mar,
	author = {Scharon Harding, Ars Technica},
	title = {{A Leap Year Glitch Broke Self-Pay Gas Station Pumps Across New Zealand}},
	journal = {WIRED},
	year = {2024},
	month = mar,
	publisher = {WIRED},
	url = {https://www.wired.com/story/leap-year-glitch-gas-pumps-broken-new-zealand}
}
@book{adams1987dirk,
  title={Dirk Gently's Holistic Detective Agency},
  author={Adams, D.},
  isbn={9780671625825},
  lccn={87009464},
  series={Dirk Gently series},
  url={https://books.google.nl/books?id=8ENaAAAAMAAJ},
  year={1987},
  publisher={Simon and Schuster}
}

@misc{ContributorstoWikimediaprojects2024Feb,
	author = {{Contributors to Wikimedia projects}},
	title = {{Abductive reasoning - Wikipedia}},
	year = {2024},
	month = feb,
	note = {[Online; accessed 2. Mar. 2024]},
	url = {https://en.wikipedia.org/w/index.php?title=Abductive_reasoning&oldid=1202958268}
}